
Robotic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004780  08004780  00014780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004968  08004968  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004970  08004970  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08004978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000108  08004a80  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08004a80  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005a98  00000000  00000000  0002017b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001662  00000000  00000000  00025c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000540  00000000  00000000  00027278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003ca  00000000  00000000  000277b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ac0  00000000  00000000  00027b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000071fe  00000000  00000000  0003d642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008333a  00000000  00000000  00044840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001748  00000000  00000000  000c7b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c92c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000108 	.word	0x20000108
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004768 	.word	0x08004768

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000010c 	.word	0x2000010c
 80001d4:	08004768 	.word	0x08004768

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b88:	f000 b970 	b.w	8000e6c <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	460f      	mov	r7, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14a      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0xe2>
 8000bba:	fab2 f382 	clz	r3, r2
 8000bbe:	b143      	cbz	r3, 8000bd2 <__udivmoddi4+0x2e>
 8000bc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc4:	f1c3 0220 	rsb	r2, r3, #32
 8000bc8:	409f      	lsls	r7, r3
 8000bca:	fa20 f202 	lsr.w	r2, r0, r2
 8000bce:	4317      	orrs	r7, r2
 8000bd0:	409c      	lsls	r4, r3
 8000bd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bd6:	fa1f f58c 	uxth.w	r5, ip
 8000bda:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be8:	fb01 f005 	mul.w	r0, r1, r5
 8000bec:	4290      	cmp	r0, r2
 8000bee:	d90a      	bls.n	8000c06 <__udivmoddi4+0x62>
 8000bf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bf8:	f080 811c 	bcs.w	8000e34 <__udivmoddi4+0x290>
 8000bfc:	4290      	cmp	r0, r2
 8000bfe:	f240 8119 	bls.w	8000e34 <__udivmoddi4+0x290>
 8000c02:	3902      	subs	r1, #2
 8000c04:	4462      	add	r2, ip
 8000c06:	1a12      	subs	r2, r2, r0
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c16:	fb00 f505 	mul.w	r5, r0, r5
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x90>
 8000c1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c22:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c26:	f080 8107 	bcs.w	8000e38 <__udivmoddi4+0x294>
 8000c2a:	42a5      	cmp	r5, r4
 8000c2c:	f240 8104 	bls.w	8000e38 <__udivmoddi4+0x294>
 8000c30:	4464      	add	r4, ip
 8000c32:	3802      	subs	r0, #2
 8000c34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c38:	1b64      	subs	r4, r4, r5
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	b11e      	cbz	r6, 8000c46 <__udivmoddi4+0xa2>
 8000c3e:	40dc      	lsrs	r4, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	e9c6 4300 	strd	r4, r3, [r6]
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0xbc>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	f000 80ed 	beq.w	8000e2e <__udivmoddi4+0x28a>
 8000c54:	2100      	movs	r1, #0
 8000c56:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c60:	fab3 f183 	clz	r1, r3
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d149      	bne.n	8000cfc <__udivmoddi4+0x158>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	d302      	bcc.n	8000c72 <__udivmoddi4+0xce>
 8000c6c:	4282      	cmp	r2, r0
 8000c6e:	f200 80f8 	bhi.w	8000e62 <__udivmoddi4+0x2be>
 8000c72:	1a84      	subs	r4, r0, r2
 8000c74:	eb65 0203 	sbc.w	r2, r5, r3
 8000c78:	2001      	movs	r0, #1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d0e2      	beq.n	8000c46 <__udivmoddi4+0xa2>
 8000c80:	e9c6 4700 	strd	r4, r7, [r6]
 8000c84:	e7df      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c86:	b902      	cbnz	r2, 8000c8a <__udivmoddi4+0xe6>
 8000c88:	deff      	udf	#255	; 0xff
 8000c8a:	fab2 f382 	clz	r3, r2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8090 	bne.w	8000db4 <__udivmoddi4+0x210>
 8000c94:	1a8a      	subs	r2, r1, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca8:	0c22      	lsrs	r2, r4, #16
 8000caa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cae:	fb0e f005 	mul.w	r0, lr, r5
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cb6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cba:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x122>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2b8>
 8000cc6:	4645      	mov	r5, r8
 8000cc8:	1a12      	subs	r2, r2, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x14e>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x14c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2c2>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfa:	e79f      	b.n	8000c3c <__udivmoddi4+0x98>
 8000cfc:	f1c1 0720 	rsb	r7, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d12:	40fd      	lsrs	r5, r7
 8000d14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d18:	4323      	orrs	r3, r4
 8000d1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	fb09 5518 	mls	r5, r9, r8, r5
 8000d26:	0c1c      	lsrs	r4, r3, #16
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b0>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2b4>
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2b4>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4464      	add	r4, ip
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	b29d      	uxth	r5, r3
 8000d58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1da>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2ac>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2ac>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	4464      	add	r4, ip
 8000d7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d82:	fba3 9502 	umull	r9, r5, r3, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	42ac      	cmp	r4, r5
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46ae      	mov	lr, r5
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x29c>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x298>
 8000d94:	b156      	cbz	r6, 8000dac <__udivmoddi4+0x208>
 8000d96:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000da2:	40ca      	lsrs	r2, r1
 8000da4:	40cc      	lsrs	r4, r1
 8000da6:	4317      	orrs	r7, r2
 8000da8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dac:	4618      	mov	r0, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	f1c3 0120 	rsb	r1, r3, #32
 8000db8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dbc:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc0:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc4:	409d      	lsls	r5, r3
 8000dc6:	432a      	orrs	r2, r5
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd8:	0c11      	lsrs	r1, r2, #16
 8000dda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dde:	fb00 f50e 	mul.w	r5, r0, lr
 8000de2:	428d      	cmp	r5, r1
 8000de4:	fa04 f403 	lsl.w	r4, r4, r3
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x258>
 8000dea:	eb1c 0101 	adds.w	r1, ip, r1
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000df4:	428d      	cmp	r5, r1
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4461      	add	r1, ip
 8000dfc:	1b49      	subs	r1, r1, r5
 8000dfe:	b292      	uxth	r2, r2
 8000e00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e04:	fb07 1115 	mls	r1, r7, r5, r1
 8000e08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e10:	4291      	cmp	r1, r2
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x282>
 8000e14:	eb1c 0202 	adds.w	r2, ip, r2
 8000e18:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2a8>
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2a8>
 8000e22:	3d02      	subs	r5, #2
 8000e24:	4462      	add	r2, ip
 8000e26:	1a52      	subs	r2, r2, r1
 8000e28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0xfc>
 8000e2e:	4631      	mov	r1, r6
 8000e30:	4630      	mov	r0, r6
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000e34:	4639      	mov	r1, r7
 8000e36:	e6e6      	b.n	8000c06 <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e6fb      	b.n	8000c34 <__udivmoddi4+0x90>
 8000e3c:	4548      	cmp	r0, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f0>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000e4c:	4645      	mov	r5, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x282>
 8000e50:	462b      	mov	r3, r5
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1da>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x258>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b0>
 8000e5c:	3d02      	subs	r5, #2
 8000e5e:	4462      	add	r2, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x124>
 8000e62:	4608      	mov	r0, r1
 8000e64:	e70a      	b.n	8000c7c <__udivmoddi4+0xd8>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x14e>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f001 fc76 	bl	8002764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f81a 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f000 f882 	bl	8000f84 <MX_GPIO_Init>
  USART2_Init();
 8000e80:	f001 f9a2 	bl	80021c8 <USART2_Init>
  UART_Interrupt_Init();
 8000e84:	f001 fa1e 	bl	80022c4 <UART_Interrupt_Init>
  PID_Odom_Interrupt_Init();
 8000e88:	f000 fb26 	bl	80014d8 <PID_Odom_Interrupt_Init>
  Motors_Init();
 8000e8c:	f000 f97a 	bl	8001184 <Motors_Init>
  Encoders_Init();
 8000e90:	f000 fd16 	bl	80018c0 <Encoders_Init>

  Reset_Encoders(&init_odom);
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <main+0x38>)
 8000e96:	f000 ff95 	bl	8001dc4 <Reset_Encoders>

  Set_Motor_Speed(0, 0);
 8000e9a:	eddf 0a04 	vldr	s1, [pc, #16]	; 8000eac <main+0x3c>
 8000e9e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8000eac <main+0x3c>
 8000ea2:	f000 fbe1 	bl	8001668 <Set_Motor_Speed>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <main+0x36>
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	00000000 	.word	0x00000000

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b094      	sub	sp, #80	; 0x50
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2230      	movs	r2, #48	; 0x30
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fb90 	bl	80035e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <SystemClock_Config+0xcc>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <SystemClock_Config+0xcc>)
 8000ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <SystemClock_Config+0xcc>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <SystemClock_Config+0xd0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <SystemClock_Config+0xd0>)
 8000efa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <SystemClock_Config+0xd0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f10:	2301      	movs	r3, #1
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f14:	2310      	movs	r3, #16
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f20:	2310      	movs	r3, #16
 8000f22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fef0 	bl	8002d1c <HAL_RCC_OscConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f42:	f000 f879 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 f952 	bl	800320c <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f6e:	f000 f863 	bl	8001038 <Error_Handler>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3750      	adds	r7, #80	; 0x50
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <MX_GPIO_Init+0xac>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a23      	ldr	r2, [pc, #140]	; (8001030 <MX_GPIO_Init+0xac>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_GPIO_Init+0xac>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_GPIO_Init+0xac>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <MX_GPIO_Init+0xac>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_GPIO_Init+0xac>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_GPIO_Init+0xac>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <MX_GPIO_Init+0xac>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_GPIO_Init+0xac>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_GPIO_Init+0xac>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <MX_GPIO_Init+0xac>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_GPIO_Init+0xac>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800100a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001010:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_GPIO_Init+0xb0>)
 8001022:	f001 fcf7 	bl	8002a14 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40020800 	.word	0x40020800

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <Motors_Init>:
};

// TIM2 CH1 and CH2 configuration as PWM output
// Driver direction pins configuration
void Motors_Init()
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	left_motor.Compute_PID = Compute_PID;
 8001188:	4ba8      	ldr	r3, [pc, #672]	; (800142c <Motors_Init+0x2a8>)
 800118a:	4aa9      	ldr	r2, [pc, #676]	; (8001430 <Motors_Init+0x2ac>)
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
	right_motor.Compute_PID = Compute_PID;
 800118e:	4ba9      	ldr	r3, [pc, #676]	; (8001434 <Motors_Init+0x2b0>)
 8001190:	4aa7      	ldr	r2, [pc, #668]	; (8001430 <Motors_Init+0x2ac>)
 8001192:	625a      	str	r2, [r3, #36]	; 0x24

	// Enabe GPIOA (PWM port), GPIOB and GPIOC clock source
	RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOAEN );
 8001194:	4ba8      	ldr	r3, [pc, #672]	; (8001438 <Motors_Init+0x2b4>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4aa7      	ldr	r2, [pc, #668]	; (8001438 <Motors_Init+0x2b4>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOBEN );
 80011a0:	4ba5      	ldr	r3, [pc, #660]	; (8001438 <Motors_Init+0x2b4>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	4aa4      	ldr	r2, [pc, #656]	; (8001438 <Motors_Init+0x2b4>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOCEN );
 80011ac:	4ba2      	ldr	r3, [pc, #648]	; (8001438 <Motors_Init+0x2b4>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4aa1      	ldr	r2, [pc, #644]	; (8001438 <Motors_Init+0x2b4>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30

	// Enable TIM2 (PWM source) clock source - 84Mhz
	RCC->APB1ENR |= ( RCC_APB1ENR_TIM2EN );
 80011b8:	4b9f      	ldr	r3, [pc, #636]	; (8001438 <Motors_Init+0x2b4>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	4a9e      	ldr	r2, [pc, #632]	; (8001438 <Motors_Init+0x2b4>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6413      	str	r3, [r2, #64]	; 0x40

	// Set PWM source channel pins PA0 (CH1) and PA1 (CH2)
	// to alternate function mode AF1
	PWMA.port->MODER &= ~(0b11 << 2*PWMA.pin);
 80011c4:	4b9d      	ldr	r3, [pc, #628]	; (800143c <Motors_Init+0x2b8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b9c      	ldr	r3, [pc, #624]	; (800143c <Motors_Init+0x2b8>)
 80011cc:	791b      	ldrb	r3, [r3, #4]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2103      	movs	r1, #3
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	4b98      	ldr	r3, [pc, #608]	; (800143c <Motors_Init+0x2b8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	400a      	ands	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
	PWMA.port->MODER |=  (0b10 << 2*PWMA.pin);
 80011e2:	4b96      	ldr	r3, [pc, #600]	; (800143c <Motors_Init+0x2b8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b94      	ldr	r3, [pc, #592]	; (800143c <Motors_Init+0x2b8>)
 80011ea:	791b      	ldrb	r3, [r3, #4]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2102      	movs	r1, #2
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	4b91      	ldr	r3, [pc, #580]	; (800143c <Motors_Init+0x2b8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
	PWMB.port->MODER &= ~(0b11 << 2*PWMB.pin);
 80011fe:	4b90      	ldr	r3, [pc, #576]	; (8001440 <Motors_Init+0x2bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b8e      	ldr	r3, [pc, #568]	; (8001440 <Motors_Init+0x2bc>)
 8001206:	791b      	ldrb	r3, [r3, #4]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2103      	movs	r1, #3
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	4b8a      	ldr	r3, [pc, #552]	; (8001440 <Motors_Init+0x2bc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
	PWMB.port->MODER |=  (0b10 << 2*PWMB.pin);
 800121c:	4b88      	ldr	r3, [pc, #544]	; (8001440 <Motors_Init+0x2bc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b87      	ldr	r3, [pc, #540]	; (8001440 <Motors_Init+0x2bc>)
 8001224:	791b      	ldrb	r3, [r3, #4]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2102      	movs	r1, #2
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	4619      	mov	r1, r3
 8001230:	4b83      	ldr	r3, [pc, #524]	; (8001440 <Motors_Init+0x2bc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	601a      	str	r2, [r3, #0]

	PWMA.port->AFR[0] &= ~(0b1111 << 4*PWMA.pin);
 8001238:	4b80      	ldr	r3, [pc, #512]	; (800143c <Motors_Init+0x2b8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6a1a      	ldr	r2, [r3, #32]
 800123e:	4b7f      	ldr	r3, [pc, #508]	; (800143c <Motors_Init+0x2b8>)
 8001240:	791b      	ldrb	r3, [r3, #4]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	210f      	movs	r1, #15
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	4b7b      	ldr	r3, [pc, #492]	; (800143c <Motors_Init+0x2b8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	400a      	ands	r2, r1
 8001254:	621a      	str	r2, [r3, #32]
	PWMA.port->AFR[0] |=  (0b0001 << 4*PWMA.pin);
 8001256:	4b79      	ldr	r3, [pc, #484]	; (800143c <Motors_Init+0x2b8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	4b77      	ldr	r3, [pc, #476]	; (800143c <Motors_Init+0x2b8>)
 800125e:	791b      	ldrb	r3, [r3, #4]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	2101      	movs	r1, #1
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	4619      	mov	r1, r3
 800126a:	4b74      	ldr	r3, [pc, #464]	; (800143c <Motors_Init+0x2b8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	621a      	str	r2, [r3, #32]
	PWMB.port->AFR[0] &= ~(0b1111 << 4*PWMB.pin);
 8001272:	4b73      	ldr	r3, [pc, #460]	; (8001440 <Motors_Init+0x2bc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6a1a      	ldr	r2, [r3, #32]
 8001278:	4b71      	ldr	r3, [pc, #452]	; (8001440 <Motors_Init+0x2bc>)
 800127a:	791b      	ldrb	r3, [r3, #4]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	210f      	movs	r1, #15
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <Motors_Init+0x2bc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	400a      	ands	r2, r1
 800128e:	621a      	str	r2, [r3, #32]
	PWMB.port->AFR[0] |=  (0b0001 << 4*PWMB.pin);
 8001290:	4b6b      	ldr	r3, [pc, #428]	; (8001440 <Motors_Init+0x2bc>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6a1a      	ldr	r2, [r3, #32]
 8001296:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <Motors_Init+0x2bc>)
 8001298:	791b      	ldrb	r3, [r3, #4]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	2101      	movs	r1, #1
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	4619      	mov	r1, r3
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <Motors_Init+0x2bc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	621a      	str	r2, [r3, #32]

	// Autoreload value determines the frequency of
	// the PWM signal - 84MHz -> 20kHz
	TIM2->PSC = 1 - 1;
 80012ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = PWM_ARR;
 80012b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b8:	f241 0267 	movw	r2, #4199	; 0x1067
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c

	// PWM mode 1 - channel is active as long as
	// TIM2->CNT < TIM2->CCR1 - during the timer period
	TIM2->CCMR1 &= ~(0b111 << TIM_CCMR1_OC1M_Pos | 0b111 << TIM_CCMR1_OC2M_Pos);
 80012be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012d0:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (0b110 << TIM_CCMR1_OC1M_Pos | 0b110 << TIM_CCMR1_OC2M_Pos);
 80012d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012dc:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80012e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012e4:	6193      	str	r3, [r2, #24]

	// Enable preload for TIM2
	TIM2->CCMR1 |= (0b1 << TIM_CCMR1_OC1PE_Pos | 0b1 << TIM_CCMR1_OC2PE_Pos);
 80012e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6193      	str	r3, [r2, #24]

	// Enable autoreload for TIM2
	TIM2->CR1 |= (0b1 << TIM_CR1_ARPE_Pos);
 80012fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	6013      	str	r3, [r2, #0]

	// Enable automatic update of registers
	TIM2->EGR |= (0b1 << TIM_EGR_UG_Pos);
 800130a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6153      	str	r3, [r2, #20]

	// Enable capture/compare as output
	// (PWM output to driver) for CH1 and CH2
	// Default falling edge mode
	TIM2->CCER |= (0b1 << TIM_CCER_CC1E_Pos | 0b1 << TIM_CCER_CC2E_Pos);
 800131a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001324:	f043 0311 	orr.w	r3, r3, #17
 8001328:	6213      	str	r3, [r2, #32]

	// Enable PWM generation in default edge aligned mode
	TIM2->CR1 |= (0b1 << TIM_CR1_CEN_Pos);
 800132a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6013      	str	r3, [r2, #0]



	// Configure pins for driver direction as
	// general purpose output pins
	BI2.port->MODER &= ~(0b11 << 2*BI2.pin);
 800133a:	4b42      	ldr	r3, [pc, #264]	; (8001444 <Motors_Init+0x2c0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b40      	ldr	r3, [pc, #256]	; (8001444 <Motors_Init+0x2c0>)
 8001342:	791b      	ldrb	r3, [r3, #4]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2103      	movs	r1, #3
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	4619      	mov	r1, r3
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <Motors_Init+0x2c0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	400a      	ands	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
	BI2.port->MODER |=  (0b01 << 2*BI2.pin);
 8001358:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <Motors_Init+0x2c0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b39      	ldr	r3, [pc, #228]	; (8001444 <Motors_Init+0x2c0>)
 8001360:	791b      	ldrb	r3, [r3, #4]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	4619      	mov	r1, r3
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <Motors_Init+0x2c0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]

	BI1.port->MODER &= ~(0b11 << 2*BI1.pin);
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <Motors_Init+0x2c4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b33      	ldr	r3, [pc, #204]	; (8001448 <Motors_Init+0x2c4>)
 800137c:	791b      	ldrb	r3, [r3, #4]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2103      	movs	r1, #3
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	4619      	mov	r1, r3
 800138a:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <Motors_Init+0x2c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	400a      	ands	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
	BI1.port->MODER |=  (0b01 << 2*BI1.pin);
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <Motors_Init+0x2c4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <Motors_Init+0x2c4>)
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <Motors_Init+0x2c4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]

	AI1.port->MODER &= ~(0b11 << 2*AI1.pin);
 80013ae:	4b27      	ldr	r3, [pc, #156]	; (800144c <Motors_Init+0x2c8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <Motors_Init+0x2c8>)
 80013b6:	791b      	ldrb	r3, [r3, #4]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2103      	movs	r1, #3
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <Motors_Init+0x2c8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	400a      	ands	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
	AI1.port->MODER |=  (0b01 << 2*AI1.pin);
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <Motors_Init+0x2c8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <Motors_Init+0x2c8>)
 80013d4:	791b      	ldrb	r3, [r3, #4]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	4619      	mov	r1, r3
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <Motors_Init+0x2c8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

	AI2.port->MODER &= ~(0b11 << 2*AI2.pin);
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <Motors_Init+0x2cc>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <Motors_Init+0x2cc>)
 80013f0:	791b      	ldrb	r3, [r3, #4]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2103      	movs	r1, #3
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <Motors_Init+0x2cc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	400a      	ands	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
	AI2.port->MODER |=  (0b01 << 2*AI2.pin);
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <Motors_Init+0x2cc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <Motors_Init+0x2cc>)
 800140e:	791b      	ldrb	r3, [r3, #4]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	4619      	mov	r1, r3
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <Motors_Init+0x2cc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

	// Configure pins for driver direction as
	// output push pull (reset state)
	BI2.port->OTYPER &=  ~(0b1 << BI2.pin);
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <Motors_Init+0x2c0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	e014      	b.n	8001454 <Motors_Init+0x2d0>
 800142a:	bf00      	nop
 800142c:	20000044 	.word	0x20000044
 8001430:	08001699 	.word	0x08001699
 8001434:	2000006c 	.word	0x2000006c
 8001438:	40023800 	.word	0x40023800
 800143c:	20000034 	.word	0x20000034
 8001440:	2000003c 	.word	0x2000003c
 8001444:	20000014 	.word	0x20000014
 8001448:	2000001c 	.word	0x2000001c
 800144c:	2000002c 	.word	0x2000002c
 8001450:	20000024 	.word	0x20000024
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <Motors_Init+0x344>)
 8001456:	791b      	ldrb	r3, [r3, #4]
 8001458:	4619      	mov	r1, r3
 800145a:	2301      	movs	r3, #1
 800145c:	408b      	lsls	r3, r1
 800145e:	43db      	mvns	r3, r3
 8001460:	4619      	mov	r1, r3
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <Motors_Init+0x344>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	400a      	ands	r2, r1
 8001468:	605a      	str	r2, [r3, #4]
	BI1.port->OTYPER &=  ~(0b1 << BI1.pin);
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <Motors_Init+0x348>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <Motors_Init+0x348>)
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	4619      	mov	r1, r3
 8001476:	2301      	movs	r3, #1
 8001478:	408b      	lsls	r3, r1
 800147a:	43db      	mvns	r3, r3
 800147c:	4619      	mov	r1, r3
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <Motors_Init+0x348>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	400a      	ands	r2, r1
 8001484:	605a      	str	r2, [r3, #4]
	AI1.port->OTYPER &=  ~(0b1 << AI1.pin);
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <Motors_Init+0x34c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <Motors_Init+0x34c>)
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	4619      	mov	r1, r3
 8001492:	2301      	movs	r3, #1
 8001494:	408b      	lsls	r3, r1
 8001496:	43db      	mvns	r3, r3
 8001498:	4619      	mov	r1, r3
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <Motors_Init+0x34c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	400a      	ands	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]
	AI2.port->OTYPER &=  ~(0b1 << AI2.pin);
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <Motors_Init+0x350>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <Motors_Init+0x350>)
 80014aa:	791b      	ldrb	r3, [r3, #4]
 80014ac:	4619      	mov	r1, r3
 80014ae:	2301      	movs	r3, #1
 80014b0:	408b      	lsls	r3, r1
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4619      	mov	r1, r3
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <Motors_Init+0x350>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	400a      	ands	r2, r1
 80014bc:	605a      	str	r2, [r3, #4]
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	20000014 	.word	0x20000014
 80014cc:	2000001c 	.word	0x2000001c
 80014d0:	2000002c 	.word	0x2000002c
 80014d4:	20000024 	.word	0x20000024

080014d8 <PID_Odom_Interrupt_Init>:

// Configures timer TIM11 with interrupt every 10ms which executes
// PID computation and updates odometry data
void PID_Odom_Interrupt_Init()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	// Lower priority than UART IRQHandler and UART buffer checking
	uint32_t tim10_pri_encoding = NVIC_EncodePriority(0, 1, 2);
 80014de:	2202      	movs	r2, #2
 80014e0:	2101      	movs	r1, #1
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fe1a 	bl	800111c <NVIC_EncodePriority>
 80014e8:	6078      	str	r0, [r7, #4]

	// Clock source for TIM10
	RCC->APB2ENR |= ( RCC_APB2ENR_TIM10EN );
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <PID_Odom_Interrupt_Init+0x6c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <PID_Odom_Interrupt_Init+0x6c>)
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44

	// Clock setup for TIM10, 10ms
	TIM10->PSC = 13 - 1;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <PID_Odom_Interrupt_Init+0x70>)
 80014f8:	220c      	movs	r2, #12
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
	TIM10->ARR = 60000 - 1;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <PID_Odom_Interrupt_Init+0x70>)
 80014fe:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable immediate update of register on counter
	TIM10->EGR |= ( TIM_EGR_UG );
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <PID_Odom_Interrupt_Init+0x70>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <PID_Odom_Interrupt_Init+0x70>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6153      	str	r3, [r2, #20]

	// Enable interrupts for TIM10
	TIM10->DIER |= ( TIM_DIER_UIE );
 8001510:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <PID_Odom_Interrupt_Init+0x70>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <PID_Odom_Interrupt_Init+0x70>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	60d3      	str	r3, [r2, #12]

	// Enable counter for TIM10
	TIM10->CR1 |= ( TIM_CR1_CEN );
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <PID_Odom_Interrupt_Init+0x70>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a09      	ldr	r2, [pc, #36]	; (8001548 <PID_Odom_Interrupt_Init+0x70>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]

	// Setup the NVIC to enable interrupts.
	NVIC_SetPriorityGrouping( 0 );
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fd8b 	bl	8001044 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority( TIM1_UP_TIM10_IRQn, tim10_pri_encoding );
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	2019      	movs	r0, #25
 8001532:	f7ff fdc9 	bl	80010c8 <__NVIC_SetPriority>
	NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 8001536:	2019      	movs	r0, #25
 8001538:	f7ff fda8 	bl	800108c <__NVIC_EnableIRQ>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40014400 	.word	0x40014400

0800154c <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{;
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	interrupt_counter += 10;
 8001552:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <TIM1_UP_TIM10_IRQHandler+0x104>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	330a      	adds	r3, #10
 8001558:	4a3d      	ldr	r2, [pc, #244]	; (8001650 <TIM1_UP_TIM10_IRQHandler+0x104>)
 800155a:	6013      	str	r3, [r2, #0]

	// Calculates new position and orientation based on encoder output
	// and sends odometry data via UART
	if( interrupt_counter % ODOM_TIME == 0 ){
 800155c:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <TIM1_UP_TIM10_IRQHandler+0x104>)
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <TIM1_UP_TIM10_IRQHandler+0x108>)
 8001562:	fba3 2301 	umull	r2, r3, r3, r1
 8001566:	091a      	lsrs	r2, r3, #4
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	1aca      	subs	r2, r1, r3
 8001572:	2a00      	cmp	r2, #0
 8001574:	d123      	bne.n	80015be <TIM1_UP_TIM10_IRQHandler+0x72>
		//Send_Byte('2');
		sOdom_t* odom = Read_Encoders();
 8001576:	f000 fb0b 	bl	8001b90 <Read_Encoders>
 800157a:	6078      	str	r0, [r7, #4]

		send_odom[0] = odom->x;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a35      	ldr	r2, [pc, #212]	; (8001658 <TIM1_UP_TIM10_IRQHandler+0x10c>)
 8001582:	6013      	str	r3, [r2, #0]
		send_odom[1] = odom->y;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4a33      	ldr	r2, [pc, #204]	; (8001658 <TIM1_UP_TIM10_IRQHandler+0x10c>)
 800158a:	6053      	str	r3, [r2, #4]
		send_odom[2] = odom->theta;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a31      	ldr	r2, [pc, #196]	; (8001658 <TIM1_UP_TIM10_IRQHandler+0x10c>)
 8001592:	6093      	str	r3, [r2, #8]
		send_odom[3] = odom->left_speed;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <TIM1_UP_TIM10_IRQHandler+0x10c>)
 800159a:	60d3      	str	r3, [r2, #12]
		send_odom[4] = odom->right_speed;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <TIM1_UP_TIM10_IRQHandler+0x10c>)
 80015a2:	6113      	str	r3, [r2, #16]

		left_motor.current_speed = odom->left_speed;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a2c      	ldr	r2, [pc, #176]	; (800165c <TIM1_UP_TIM10_IRQHandler+0x110>)
 80015aa:	6053      	str	r3, [r2, #4]
		right_motor.current_speed = odom->right_speed;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	4a2b      	ldr	r2, [pc, #172]	; (8001660 <TIM1_UP_TIM10_IRQHandler+0x114>)
 80015b2:	6053      	str	r3, [r2, #4]

		Send_Command(ODOM_TRANSMIT, send_odom, sizeof(send_odom));
 80015b4:	2214      	movs	r2, #20
 80015b6:	4928      	ldr	r1, [pc, #160]	; (8001658 <TIM1_UP_TIM10_IRQHandler+0x10c>)
 80015b8:	204f      	movs	r0, #79	; 0x4f
 80015ba:	f001 f84f 	bl	800265c <Send_Command>
	}

	// Calculates speed loop PID and sends the output to the driver
	if( interrupt_counter % PID_TIME == 0 ){
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <TIM1_UP_TIM10_IRQHandler+0x104>)
 80015c0:	6819      	ldr	r1, [r3, #0]
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <TIM1_UP_TIM10_IRQHandler+0x108>)
 80015c4:	fba3 2301 	umull	r2, r3, r3, r1
 80015c8:	095a      	lsrs	r2, r3, #5
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	1aca      	subs	r2, r1, r3
 80015d4:	2a00      	cmp	r2, #0
 80015d6:	d130      	bne.n	800163a <TIM1_UP_TIM10_IRQHandler+0xee>
		//Send_Byte('4');
		left_motor.Compute_PID(&left_motor);
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <TIM1_UP_TIM10_IRQHandler+0x110>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	481f      	ldr	r0, [pc, #124]	; (800165c <TIM1_UP_TIM10_IRQHandler+0x110>)
 80015de:	4798      	blx	r3
		right_motor.Compute_PID(&right_motor);
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <TIM1_UP_TIM10_IRQHandler+0x114>)
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	481e      	ldr	r0, [pc, #120]	; (8001660 <TIM1_UP_TIM10_IRQHandler+0x114>)
 80015e6:	4798      	blx	r3

		Set_Motor_Direction(left_motor.control_PWM, right_motor.control_PWM);
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <TIM1_UP_TIM10_IRQHandler+0x110>)
 80015ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <TIM1_UP_TIM10_IRQHandler+0x114>)
 80015f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80015f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fc:	ee17 1a90 	vmov	r1, s15
 8001600:	ee17 0a10 	vmov	r0, s14
 8001604:	f000 f8c6 	bl	8001794 <Set_Motor_Direction>
		Set_Motor_PWM(abs(left_motor.control_PWM), abs(right_motor.control_PWM));
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <TIM1_UP_TIM10_IRQHandler+0x110>)
 800160a:	edd3 7a02 	vldr	s15, [r3, #8]
 800160e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001612:	ee17 3a90 	vmov	r3, s15
 8001616:	2b00      	cmp	r3, #0
 8001618:	bfb8      	it	lt
 800161a:	425b      	neglt	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <TIM1_UP_TIM10_IRQHandler+0x114>)
 8001620:	edd3 7a02 	vldr	s15, [r3, #8]
 8001624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001628:	ee17 3a90 	vmov	r3, s15
 800162c:	2b00      	cmp	r3, #0
 800162e:	bfb8      	it	lt
 8001630:	425b      	neglt	r3, r3
 8001632:	4619      	mov	r1, r3
 8001634:	4610      	mov	r0, r2
 8001636:	f000 f8f7 	bl	8001828 <Set_Motor_PWM>
	}

	// Clears interrupt flag so that other interrupts can work
	TIM10->SR &= ~TIM_SR_UIF;
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <TIM1_UP_TIM10_IRQHandler+0x118>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <TIM1_UP_TIM10_IRQHandler+0x118>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6113      	str	r3, [r2, #16]
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000130 	.word	0x20000130
 8001654:	cccccccd 	.word	0xcccccccd
 8001658:	20000134 	.word	0x20000134
 800165c:	20000044 	.word	0x20000044
 8001660:	2000006c 	.word	0x2000006c
 8001664:	40014400 	.word	0x40014400

08001668 <Set_Motor_Speed>:

// Sets target speed for speed loop
void Set_Motor_Speed(float left, float right)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001672:	edc7 0a00 	vstr	s1, [r7]
	left_motor.target_speed = left;
 8001676:	4a06      	ldr	r2, [pc, #24]	; (8001690 <Set_Motor_Speed+0x28>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6013      	str	r3, [r2, #0]
	right_motor.target_speed = right;
 800167c:	4a05      	ldr	r2, [pc, #20]	; (8001694 <Set_Motor_Speed+0x2c>)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	6013      	str	r3, [r2, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000044 	.word	0x20000044
 8001694:	2000006c 	.word	0x2000006c

08001698 <Compute_PID>:

// Updates PWM control for reaching and holding target speed
void Compute_PID(sMotor_t *self){
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	self->errors[2] = self->errors[1];
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	615a      	str	r2, [r3, #20]
	self->errors[1] = self->errors[0];
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	611a      	str	r2, [r3, #16]
	self->errors[0] = self->target_speed - self->current_speed;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	ed93 7a00 	vldr	s14, [r3]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80016bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edc3 7a03 	vstr	s15, [r3, #12]

	q0 = self->Kp + self->Kd/PID_TIME;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	edd3 6a08 	vldr	s13, [r3, #32]
 80016d2:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8001784 <Compute_PID+0xec>
 80016d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <Compute_PID+0xf0>)
 80016e0:	edc3 7a00 	vstr	s15, [r3]
	q1 = self->Ki*PID_TIME - 2*self->Kd/PID_TIME - self->Kp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80016ea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001784 <Compute_PID+0xec>
 80016ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80016f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80016fc:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8001784 <Compute_PID+0xec>
 8001700:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001704:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	edd3 7a06 	vldr	s15, [r3, #24]
 800170e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <Compute_PID+0xf4>)
 8001714:	edc3 7a00 	vstr	s15, [r3]
	q2 = - self->Kd/PID_TIME;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	edd3 7a08 	vldr	s15, [r3, #32]
 800171e:	eeb1 7a67 	vneg.f32	s14, s15
 8001722:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001784 <Compute_PID+0xec>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <Compute_PID+0xf8>)
 800172c:	edc3 7a00 	vstr	s15, [r3]

	self->control_PWM += q0 * self->errors[0] + q1 * self->errors[1] + q2 * self->errors[2];
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	ed93 7a02 	vldr	s14, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 6a03 	vldr	s13, [r3, #12]
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <Compute_PID+0xf0>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	ed93 6a04 	vldr	s12, [r3, #16]
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <Compute_PID+0xf4>)
 800174e:	edd3 7a00 	vldr	s15, [r3]
 8001752:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001756:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	ed93 6a05 	vldr	s12, [r3, #20]
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <Compute_PID+0xf8>)
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	ee66 7a27 	vmul.f32	s15, s12, s15
 800176a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800176e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	42200000 	.word	0x42200000
 8001788:	20000124 	.word	0x20000124
 800178c:	20000128 	.word	0x20000128
 8001790:	2000012c 	.word	0x2000012c

08001794 <Set_Motor_Direction>:

// Changes motor direction based on sign of received speeds
void Set_Motor_Direction(int left, int right)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	if (left > 0){ // counter clockwise
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd0c      	ble.n	80017be <Set_Motor_Direction+0x2a>
		Set_Pin(AI1, 0);
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <Set_Motor_Direction+0x84>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017ac:	f000 f85f 	bl	800186e <Set_Pin>
		Set_Pin(AI2, 1);
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <Set_Motor_Direction+0x88>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017b8:	f000 f859 	bl	800186e <Set_Pin>
 80017bc:	e00b      	b.n	80017d6 <Set_Motor_Direction+0x42>
	}
	else{ // clockwise
		Set_Pin(AI1, 1);
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <Set_Motor_Direction+0x84>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017c6:	f000 f852 	bl	800186e <Set_Pin>
		Set_Pin(AI2, 0);
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <Set_Motor_Direction+0x88>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017d2:	f000 f84c 	bl	800186e <Set_Pin>
	}

	if (right > 0){ // counter clockwise
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dd0c      	ble.n	80017f6 <Set_Motor_Direction+0x62>
		Set_Pin(BI1, 0);
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <Set_Motor_Direction+0x8c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017e4:	f000 f843 	bl	800186e <Set_Pin>
		Set_Pin(BI2, 1);
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <Set_Motor_Direction+0x90>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017f0:	f000 f83d 	bl	800186e <Set_Pin>
	}
	else{ // clockwise
		Set_Pin(BI1, 1);
		Set_Pin(BI2, 0);
	}
}
 80017f4:	e00b      	b.n	800180e <Set_Motor_Direction+0x7a>
		Set_Pin(BI1, 1);
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <Set_Motor_Direction+0x8c>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017fe:	f000 f836 	bl	800186e <Set_Pin>
		Set_Pin(BI2, 0);
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <Set_Motor_Direction+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	e893 0003 	ldmia.w	r3, {r0, r1}
 800180a:	f000 f830 	bl	800186e <Set_Pin>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000002c 	.word	0x2000002c
 800181c:	20000024 	.word	0x20000024
 8001820:	2000001c 	.word	0x2000001c
 8001824:	20000014 	.word	0x20000014

08001828 <Set_Motor_PWM>:

// Sets motor PWM value caclulated in speed loop
void Set_Motor_PWM(unsigned int left, unsigned int right)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	// CCR1 value determines the duty cycle of the
	// PWM signal, min - 0, max - PWM_ARR
	if (left > PWM_ARR) left = PWM_ARR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f241 0267 	movw	r2, #4199	; 0x1067
 8001838:	4293      	cmp	r3, r2
 800183a:	d902      	bls.n	8001842 <Set_Motor_PWM+0x1a>
 800183c:	f241 0367 	movw	r3, #4199	; 0x1067
 8001840:	607b      	str	r3, [r7, #4]
	if (right > PWM_ARR) right = PWM_ARR;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	f241 0267 	movw	r2, #4199	; 0x1067
 8001848:	4293      	cmp	r3, r2
 800184a:	d902      	bls.n	8001852 <Set_Motor_PWM+0x2a>
 800184c:	f241 0367 	movw	r3, #4199	; 0x1067
 8001850:	603b      	str	r3, [r7, #0]

	// TODO check which motor is which
	TIM2->CCR1 = left;
 8001852:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = right;
 800185a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <Set_Pin>:

// Sets or resets a pin
void Set_Pin(sOutput_t output, int value){
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	e883 0003 	stmia.w	r3, {r0, r1}
 800187c:	607a      	str	r2, [r7, #4]
	if (value > 0) output.port->BSRR |= (0b1 << output.pin);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	dd0a      	ble.n	800189a <Set_Pin+0x2c>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	699a      	ldr	r2, [r3, #24]
 8001888:	7b3b      	ldrb	r3, [r7, #12]
 800188a:	4619      	mov	r1, r3
 800188c:	2301      	movs	r3, #1
 800188e:	408b      	lsls	r3, r1
 8001890:	4619      	mov	r1, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	430a      	orrs	r2, r1
 8001896:	619a      	str	r2, [r3, #24]
	else output.port->BSRR |= (0b1 << (output.pin + 16));
}
 8001898:	e00a      	b.n	80018b0 <Set_Pin+0x42>
	else output.port->BSRR |= (0b1 << (output.pin + 16));
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	699a      	ldr	r2, [r3, #24]
 800189e:	7b3b      	ldrb	r3, [r7, #12]
 80018a0:	3310      	adds	r3, #16
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	4619      	mov	r1, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	619a      	str	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	0000      	movs	r0, r0
	...

080018c0 <Encoders_Init>:
float wheel_diameter = 70;
float wheel_distance = 166.42;
float inc_mm = 1;
float inc_rad = 1;

void Encoders_Init(){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0

	// Enable clock for GPIOA (encoder output)
	RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOAEN );
 80018c4:	4ba6      	ldr	r3, [pc, #664]	; (8001b60 <Encoders_Init+0x2a0>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4aa5      	ldr	r2, [pc, #660]	; (8001b60 <Encoders_Init+0x2a0>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6313      	str	r3, [r2, #48]	; 0x30

	// Clock source for TIM3
	RCC->APB1ENR |= ( RCC_APB1ENR_TIM3EN );
 80018d0:	4ba3      	ldr	r3, [pc, #652]	; (8001b60 <Encoders_Init+0x2a0>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	4aa2      	ldr	r2, [pc, #648]	; (8001b60 <Encoders_Init+0x2a0>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	6413      	str	r3, [r2, #64]	; 0x40

	// Clock source for TIM1
	RCC->APB2ENR |= ( RCC_APB2ENR_TIM1EN );
 80018dc:	4ba0      	ldr	r3, [pc, #640]	; (8001b60 <Encoders_Init+0x2a0>)
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	4a9f      	ldr	r2, [pc, #636]	; (8001b60 <Encoders_Init+0x2a0>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6453      	str	r3, [r2, #68]	; 0x44

	// Enable alternate function for PA6-9
	GPIOA->MODER &= ~(0b11 << 2*LEFTA.pin | 0b11 << 2*LEFTB.pin | \
 80018e8:	4b9e      	ldr	r3, [pc, #632]	; (8001b64 <Encoders_Init+0x2a4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a9e      	ldr	r2, [pc, #632]	; (8001b68 <Encoders_Init+0x2a8>)
 80018ee:	7912      	ldrb	r2, [r2, #4]
 80018f0:	0052      	lsls	r2, r2, #1
 80018f2:	2103      	movs	r1, #3
 80018f4:	4091      	lsls	r1, r2
 80018f6:	4a9d      	ldr	r2, [pc, #628]	; (8001b6c <Encoders_Init+0x2ac>)
 80018f8:	7912      	ldrb	r2, [r2, #4]
 80018fa:	0052      	lsls	r2, r2, #1
 80018fc:	2003      	movs	r0, #3
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	4311      	orrs	r1, r2
					0b11 << 2*RIGHTA.pin | 0b11 << 2*RIGHTB.pin);
 8001904:	4a9a      	ldr	r2, [pc, #616]	; (8001b70 <Encoders_Init+0x2b0>)
 8001906:	7912      	ldrb	r2, [r2, #4]
 8001908:	0052      	lsls	r2, r2, #1
 800190a:	2003      	movs	r0, #3
 800190c:	fa00 f202 	lsl.w	r2, r0, r2
	GPIOA->MODER &= ~(0b11 << 2*LEFTA.pin | 0b11 << 2*LEFTB.pin | \
 8001910:	4311      	orrs	r1, r2
					0b11 << 2*RIGHTA.pin | 0b11 << 2*RIGHTB.pin);
 8001912:	4a98      	ldr	r2, [pc, #608]	; (8001b74 <Encoders_Init+0x2b4>)
 8001914:	7912      	ldrb	r2, [r2, #4]
 8001916:	0052      	lsls	r2, r2, #1
 8001918:	2003      	movs	r0, #3
 800191a:	fa00 f202 	lsl.w	r2, r0, r2
 800191e:	430a      	orrs	r2, r1
	GPIOA->MODER &= ~(0b11 << 2*LEFTA.pin | 0b11 << 2*LEFTB.pin | \
 8001920:	43d2      	mvns	r2, r2
 8001922:	4611      	mov	r1, r2
 8001924:	4a8f      	ldr	r2, [pc, #572]	; (8001b64 <Encoders_Init+0x2a4>)
 8001926:	400b      	ands	r3, r1
 8001928:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 2*LEFTA.pin | 0b10 << 2*LEFTB.pin | \
 800192a:	4b8e      	ldr	r3, [pc, #568]	; (8001b64 <Encoders_Init+0x2a4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a8e      	ldr	r2, [pc, #568]	; (8001b68 <Encoders_Init+0x2a8>)
 8001930:	7912      	ldrb	r2, [r2, #4]
 8001932:	0052      	lsls	r2, r2, #1
 8001934:	2102      	movs	r1, #2
 8001936:	4091      	lsls	r1, r2
 8001938:	4a8c      	ldr	r2, [pc, #560]	; (8001b6c <Encoders_Init+0x2ac>)
 800193a:	7912      	ldrb	r2, [r2, #4]
 800193c:	0052      	lsls	r2, r2, #1
 800193e:	2002      	movs	r0, #2
 8001940:	fa00 f202 	lsl.w	r2, r0, r2
 8001944:	4311      	orrs	r1, r2
					0b10 << 2*RIGHTA.pin | 0b10 << 2*RIGHTB.pin);
 8001946:	4a8a      	ldr	r2, [pc, #552]	; (8001b70 <Encoders_Init+0x2b0>)
 8001948:	7912      	ldrb	r2, [r2, #4]
 800194a:	0052      	lsls	r2, r2, #1
 800194c:	2002      	movs	r0, #2
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
	GPIOA->MODER |=  (0b10 << 2*LEFTA.pin | 0b10 << 2*LEFTB.pin | \
 8001952:	4311      	orrs	r1, r2
					0b10 << 2*RIGHTA.pin | 0b10 << 2*RIGHTB.pin);
 8001954:	4a87      	ldr	r2, [pc, #540]	; (8001b74 <Encoders_Init+0x2b4>)
 8001956:	7912      	ldrb	r2, [r2, #4]
 8001958:	0052      	lsls	r2, r2, #1
 800195a:	2002      	movs	r0, #2
 800195c:	fa00 f202 	lsl.w	r2, r0, r2
 8001960:	430a      	orrs	r2, r1
 8001962:	4611      	mov	r1, r2
	GPIOA->MODER |=  (0b10 << 2*LEFTA.pin | 0b10 << 2*LEFTB.pin | \
 8001964:	4a7f      	ldr	r2, [pc, #508]	; (8001b64 <Encoders_Init+0x2a4>)
 8001966:	430b      	orrs	r3, r1
 8001968:	6013      	str	r3, [r2, #0]

	// Set AF2 for PA6 and PA7
	GPIOA->AFR[0] &= ~(0b1111 << 4*LEFTA.pin | 0b1111 << 4*LEFTB.pin);
 800196a:	4b7e      	ldr	r3, [pc, #504]	; (8001b64 <Encoders_Init+0x2a4>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a7e      	ldr	r2, [pc, #504]	; (8001b68 <Encoders_Init+0x2a8>)
 8001970:	7912      	ldrb	r2, [r2, #4]
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	210f      	movs	r1, #15
 8001976:	4091      	lsls	r1, r2
 8001978:	4a7c      	ldr	r2, [pc, #496]	; (8001b6c <Encoders_Init+0x2ac>)
 800197a:	7912      	ldrb	r2, [r2, #4]
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	200f      	movs	r0, #15
 8001980:	fa00 f202 	lsl.w	r2, r0, r2
 8001984:	430a      	orrs	r2, r1
 8001986:	43d2      	mvns	r2, r2
 8001988:	4611      	mov	r1, r2
 800198a:	4a76      	ldr	r2, [pc, #472]	; (8001b64 <Encoders_Init+0x2a4>)
 800198c:	400b      	ands	r3, r1
 800198e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (0b0010 << 4*LEFTA.pin | 0b0010 << 4*LEFTB.pin);
 8001990:	4b74      	ldr	r3, [pc, #464]	; (8001b64 <Encoders_Init+0x2a4>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4a74      	ldr	r2, [pc, #464]	; (8001b68 <Encoders_Init+0x2a8>)
 8001996:	7912      	ldrb	r2, [r2, #4]
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	2102      	movs	r1, #2
 800199c:	4091      	lsls	r1, r2
 800199e:	4a73      	ldr	r2, [pc, #460]	; (8001b6c <Encoders_Init+0x2ac>)
 80019a0:	7912      	ldrb	r2, [r2, #4]
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	2002      	movs	r0, #2
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	430a      	orrs	r2, r1
 80019ac:	4611      	mov	r1, r2
 80019ae:	4a6d      	ldr	r2, [pc, #436]	; (8001b64 <Encoders_Init+0x2a4>)
 80019b0:	430b      	orrs	r3, r1
 80019b2:	6213      	str	r3, [r2, #32]

	// Set AF1 for PA8 and PA9
	// AFRH is a separate register, values are linked to pins 8-15
	GPIOA->AFR[1] &= ~(0b1111 << 4*(RIGHTA.pin - 8) | 0b1111 << 4*(RIGHTB.pin - 8));
 80019b4:	4b6b      	ldr	r3, [pc, #428]	; (8001b64 <Encoders_Init+0x2a4>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	4a6d      	ldr	r2, [pc, #436]	; (8001b70 <Encoders_Init+0x2b0>)
 80019ba:	7912      	ldrb	r2, [r2, #4]
 80019bc:	3a08      	subs	r2, #8
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	210f      	movs	r1, #15
 80019c2:	4091      	lsls	r1, r2
 80019c4:	4a6b      	ldr	r2, [pc, #428]	; (8001b74 <Encoders_Init+0x2b4>)
 80019c6:	7912      	ldrb	r2, [r2, #4]
 80019c8:	3a08      	subs	r2, #8
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	200f      	movs	r0, #15
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	430a      	orrs	r2, r1
 80019d4:	43d2      	mvns	r2, r2
 80019d6:	4611      	mov	r1, r2
 80019d8:	4a62      	ldr	r2, [pc, #392]	; (8001b64 <Encoders_Init+0x2a4>)
 80019da:	400b      	ands	r3, r1
 80019dc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=  (0b0001 << 4*(RIGHTA.pin - 8) | 0b0001 << 4*(RIGHTB.pin - 8));
 80019de:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <Encoders_Init+0x2a4>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	4a63      	ldr	r2, [pc, #396]	; (8001b70 <Encoders_Init+0x2b0>)
 80019e4:	7912      	ldrb	r2, [r2, #4]
 80019e6:	3a08      	subs	r2, #8
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	2101      	movs	r1, #1
 80019ec:	4091      	lsls	r1, r2
 80019ee:	4a61      	ldr	r2, [pc, #388]	; (8001b74 <Encoders_Init+0x2b4>)
 80019f0:	7912      	ldrb	r2, [r2, #4]
 80019f2:	3a08      	subs	r2, #8
 80019f4:	0092      	lsls	r2, r2, #2
 80019f6:	2001      	movs	r0, #1
 80019f8:	fa00 f202 	lsl.w	r2, r0, r2
 80019fc:	430a      	orrs	r2, r1
 80019fe:	4611      	mov	r1, r2
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <Encoders_Init+0x2a4>)
 8001a02:	430b      	orrs	r3, r1
 8001a04:	6253      	str	r3, [r2, #36]	; 0x24

	// Clock setup for TIM1
	RIGHT.tim->PSC = 0;
 8001a06:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <Encoders_Init+0x2b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
	RIGHT.tim->ARR = 0xFFFF - 1;
 8001a0e:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <Encoders_Init+0x2b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c

	// Clock setup for TIM3
	LEFT.tim->PSC = 0;
 8001a18:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <Encoders_Init+0x2bc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
	LEFT.tim->ARR = 0xFFFF - 1;
 8001a20:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <Encoders_Init+0x2bc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable encoder quadrature mode for TIM1 and TIM3
	RIGHT.tim->SMCR &= ~(0b111 << 3*0);
 8001a2a:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <Encoders_Init+0x2b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <Encoders_Init+0x2b8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0207 	bic.w	r2, r2, #7
 8001a38:	609a      	str	r2, [r3, #8]
	RIGHT.tim->SMCR |=  (0b011 << 3*0);
 8001a3a:	4b4f      	ldr	r3, [pc, #316]	; (8001b78 <Encoders_Init+0x2b8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <Encoders_Init+0x2b8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0203 	orr.w	r2, r2, #3
 8001a48:	609a      	str	r2, [r3, #8]

	LEFT.tim->SMCR &= ~(0b111 << 3*0);
 8001a4a:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <Encoders_Init+0x2bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <Encoders_Init+0x2bc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0207 	bic.w	r2, r2, #7
 8001a58:	609a      	str	r2, [r3, #8]
	LEFT.tim->SMCR |=  (0b011 << 3*0);
 8001a5a:	4b48      	ldr	r3, [pc, #288]	; (8001b7c <Encoders_Init+0x2bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <Encoders_Init+0x2bc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0203 	orr.w	r2, r2, #3
 8001a68:	609a      	str	r2, [r3, #8]

	// Set counting direction for TIM1 and TIM3
	RIGHT.tim->CCMR1 &= ~(0b11 << 0 | 0b11 << 8);
 8001a6a:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <Encoders_Init+0x2b8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a41      	ldr	r2, [pc, #260]	; (8001b78 <Encoders_Init+0x2b8>)
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a78:	f023 0303 	bic.w	r3, r3, #3
 8001a7c:	6193      	str	r3, [r2, #24]
	RIGHT.tim->CCMR1 |=  (0b01 << 0 | 0b01 << 8);
 8001a7e:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <Encoders_Init+0x2b8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a3c      	ldr	r2, [pc, #240]	; (8001b78 <Encoders_Init+0x2b8>)
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6193      	str	r3, [r2, #24]

	LEFT.tim->CCMR1 &= ~(0b11 << 0 | 0b11 << 8);
 8001a92:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <Encoders_Init+0x2bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a38      	ldr	r2, [pc, #224]	; (8001b7c <Encoders_Init+0x2bc>)
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aa0:	f023 0303 	bic.w	r3, r3, #3
 8001aa4:	6193      	str	r3, [r2, #24]
	LEFT.tim->CCMR1 |=  (0b01 << 0 | 0b01 << 8);
 8001aa6:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <Encoders_Init+0x2bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <Encoders_Init+0x2bc>)
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6193      	str	r3, [r2, #24]

	// Enable counter for TIM1 and TIM3
	RIGHT.tim->CR1 |= (1 << 0);
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <Encoders_Init+0x2b8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <Encoders_Init+0x2b8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
	LEFT.tim->CR1 |= (1 << 0);
 8001aca:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <Encoders_Init+0x2bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <Encoders_Init+0x2bc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0201 	orr.w	r2, r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

	// Enable immediate update of register on counter
	RIGHT.tim->EGR |= (1 << 0);
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <Encoders_Init+0x2b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <Encoders_Init+0x2b8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
 8001ae8:	615a      	str	r2, [r3, #20]
	LEFT.tim->EGR |= (1 << 0);
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <Encoders_Init+0x2bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <Encoders_Init+0x2bc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	615a      	str	r2, [r3, #20]

	inc_mm = (wheel_diameter*M_PI)/PPR;
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <Encoders_Init+0x2c0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fcce 	bl	80004a0 <__aeabi_f2d>
 8001b04:	a312      	add	r3, pc, #72	; (adr r3, 8001b50 <Encoders_Init+0x290>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fd21 	bl	8000550 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	a310      	add	r3, pc, #64	; (adr r3, 8001b58 <Encoders_Init+0x298>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fe42 	bl	80007a4 <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7fe ffd4 	bl	8000ad4 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <Encoders_Init+0x2c4>)
 8001b30:	6013      	str	r3, [r2, #0]
	inc_rad = inc_mm/wheel_distance;
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <Encoders_Init+0x2c4>)
 8001b34:	edd3 6a00 	vldr	s13, [r3]
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <Encoders_Init+0x2c8>)
 8001b3a:	ed93 7a00 	vldr	s14, [r3]
 8001b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <Encoders_Init+0x2cc>)
 8001b44:	edc3 7a00 	vstr	s15, [r3]
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	f3af 8000 	nop.w
 8001b50:	54442d18 	.word	0x54442d18
 8001b54:	400921fb 	.word	0x400921fb
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40a11000 	.word	0x40a11000
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	20000094 	.word	0x20000094
 8001b6c:	2000009c 	.word	0x2000009c
 8001b70:	200000a4 	.word	0x200000a4
 8001b74:	200000ac 	.word	0x200000ac
 8001b78:	200000b8 	.word	0x200000b8
 8001b7c:	200000b4 	.word	0x200000b4
 8001b80:	200000d0 	.word	0x200000d0
 8001b84:	200000d8 	.word	0x200000d8
 8001b88:	200000d4 	.word	0x200000d4
 8001b8c:	200000dc 	.word	0x200000dc

08001b90 <Read_Encoders>:

// Calculates current position and speeds based on encoder increment readings
sOdom_t* Read_Encoders(){
 8001b90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b94:	af00      	add	r7, sp, #0
	last_left_enc  = curr_left_enc;
 8001b96:	4b7d      	ldr	r3, [pc, #500]	; (8001d8c <Read_Encoders+0x1fc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7d      	ldr	r2, [pc, #500]	; (8001d90 <Read_Encoders+0x200>)
 8001b9c:	6013      	str	r3, [r2, #0]
	last_right_enc = curr_right_enc;
 8001b9e:	4b7d      	ldr	r3, [pc, #500]	; (8001d94 <Read_Encoders+0x204>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a7d      	ldr	r2, [pc, #500]	; (8001d98 <Read_Encoders+0x208>)
 8001ba4:	6013      	str	r3, [r2, #0]

	curr_left_enc  = LEFT.tim->CNT;
 8001ba6:	4b7d      	ldr	r3, [pc, #500]	; (8001d9c <Read_Encoders+0x20c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b77      	ldr	r3, [pc, #476]	; (8001d8c <Read_Encoders+0x1fc>)
 8001bb0:	601a      	str	r2, [r3, #0]
	curr_right_enc = RIGHT.tim->CNT;
 8001bb2:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <Read_Encoders+0x210>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b76      	ldr	r3, [pc, #472]	; (8001d94 <Read_Encoders+0x204>)
 8001bbc:	601a      	str	r2, [r3, #0]

	// The delta is calulated from increments from current and last encoder readings and converted to mm
	// The cast to int16_t ensures that a jump from 0 to 65535 and vice versa won't happen
	delta_left  = (int16_t)(curr_left_enc  - last_left_enc)  * inc_mm;
 8001bbe:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <Read_Encoders+0x1fc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b72      	ldr	r3, [pc, #456]	; (8001d90 <Read_Encoders+0x200>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd8:	4b72      	ldr	r3, [pc, #456]	; (8001da4 <Read_Encoders+0x214>)
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be2:	4b71      	ldr	r3, [pc, #452]	; (8001da8 <Read_Encoders+0x218>)
 8001be4:	edc3 7a00 	vstr	s15, [r3]
	delta_right = (int16_t)(curr_right_enc - last_right_enc) * inc_mm;
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <Read_Encoders+0x204>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b6a      	ldr	r3, [pc, #424]	; (8001d98 <Read_Encoders+0x208>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c02:	4b68      	ldr	r3, [pc, #416]	; (8001da4 <Read_Encoders+0x214>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0c:	4b67      	ldr	r3, [pc, #412]	; (8001dac <Read_Encoders+0x21c>)
 8001c0e:	edc3 7a00 	vstr	s15, [r3]

	// Distance traveled from last encoder reading
	delta_distance = (delta_left + delta_right) / 2;
 8001c12:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <Read_Encoders+0x218>)
 8001c14:	ed93 7a00 	vldr	s14, [r3]
 8001c18:	4b64      	ldr	r3, [pc, #400]	; (8001dac <Read_Encoders+0x21c>)
 8001c1a:	edd3 7a00 	vldr	s15, [r3]
 8001c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c22:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c2a:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <Read_Encoders+0x220>)
 8001c2c:	edc3 7a00 	vstr	s15, [r3]
	// Change in orientation from last encoder reading
	delta_theta    = (delta_left - delta_right) / wheel_distance;
 8001c30:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <Read_Encoders+0x218>)
 8001c32:	ed93 7a00 	vldr	s14, [r3]
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <Read_Encoders+0x21c>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c40:	4b5c      	ldr	r3, [pc, #368]	; (8001db4 <Read_Encoders+0x224>)
 8001c42:	ed93 7a00 	vldr	s14, [r3]
 8001c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4a:	4b5b      	ldr	r3, [pc, #364]	; (8001db8 <Read_Encoders+0x228>)
 8001c4c:	edc3 7a00 	vstr	s15, [r3]

	// Updated odom data
	odom.x += delta_distance * cos(odom.theta + delta_theta/2);
 8001c50:	4b5a      	ldr	r3, [pc, #360]	; (8001dbc <Read_Encoders+0x22c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc23 	bl	80004a0 <__aeabi_f2d>
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	460d      	mov	r5, r1
 8001c5e:	4b54      	ldr	r3, [pc, #336]	; (8001db0 <Read_Encoders+0x220>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc1c 	bl	80004a0 <__aeabi_f2d>
 8001c68:	4680      	mov	r8, r0
 8001c6a:	4689      	mov	r9, r1
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <Read_Encoders+0x22c>)
 8001c6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c72:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <Read_Encoders+0x228>)
 8001c74:	edd3 6a00 	vldr	s13, [r3]
 8001c78:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c7c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	ee17 0a90 	vmov	r0, s15
 8001c88:	f7fe fc0a 	bl	80004a0 <__aeabi_f2d>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	ec43 2b10 	vmov	d0, r2, r3
 8001c94:	f001 fcd4 	bl	8003640 <cos>
 8001c98:	ec53 2b10 	vmov	r2, r3, d0
 8001c9c:	4640      	mov	r0, r8
 8001c9e:	4649      	mov	r1, r9
 8001ca0:	f7fe fc56 	bl	8000550 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	f7fe fa9a 	bl	80001e4 <__adddf3>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7fe ff0c 	bl	8000ad4 <__aeabi_d2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4a3f      	ldr	r2, [pc, #252]	; (8001dbc <Read_Encoders+0x22c>)
 8001cc0:	6013      	str	r3, [r2, #0]
	odom.y += delta_distance * sin(odom.theta + delta_theta/2);
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <Read_Encoders+0x22c>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fbea 	bl	80004a0 <__aeabi_f2d>
 8001ccc:	4604      	mov	r4, r0
 8001cce:	460d      	mov	r5, r1
 8001cd0:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <Read_Encoders+0x220>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fbe3 	bl	80004a0 <__aeabi_f2d>
 8001cda:	4680      	mov	r8, r0
 8001cdc:	4689      	mov	r9, r1
 8001cde:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <Read_Encoders+0x22c>)
 8001ce0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ce4:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <Read_Encoders+0x228>)
 8001ce6:	edd3 6a00 	vldr	s13, [r3]
 8001cea:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf6:	ee17 0a90 	vmov	r0, s15
 8001cfa:	f7fe fbd1 	bl	80004a0 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	ec43 2b10 	vmov	d0, r2, r3
 8001d06:	f001 fcef 	bl	80036e8 <sin>
 8001d0a:	ec53 2b10 	vmov	r2, r3, d0
 8001d0e:	4640      	mov	r0, r8
 8001d10:	4649      	mov	r1, r9
 8001d12:	f7fe fc1d 	bl	8000550 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fa61 	bl	80001e4 <__adddf3>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7fe fed3 	bl	8000ad4 <__aeabi_d2f>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <Read_Encoders+0x22c>)
 8001d32:	6053      	str	r3, [r2, #4]
	odom.theta += delta_theta;
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <Read_Encoders+0x22c>)
 8001d36:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <Read_Encoders+0x228>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <Read_Encoders+0x22c>)
 8001d46:	edc3 7a02 	vstr	s15, [r3, #8]
	odom.left_speed  = delta_left / ODOM_TIME * 1000; // mm/s
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <Read_Encoders+0x218>)
 8001d4c:	ed93 7a00 	vldr	s14, [r3]
 8001d50:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001d54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d58:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001dc0 <Read_Encoders+0x230>
 8001d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <Read_Encoders+0x22c>)
 8001d62:	edc3 7a03 	vstr	s15, [r3, #12]
	odom.right_speed = delta_right / ODOM_TIME * 1000; // mm/s
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <Read_Encoders+0x21c>)
 8001d68:	ed93 7a00 	vldr	s14, [r3]
 8001d6c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d74:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001dc0 <Read_Encoders+0x230>
 8001d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <Read_Encoders+0x22c>)
 8001d7e:	edc3 7a04 	vstr	s15, [r3, #16]

	return &odom;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <Read_Encoders+0x22c>)
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000150 	.word	0x20000150
 8001d90:	20000148 	.word	0x20000148
 8001d94:	20000154 	.word	0x20000154
 8001d98:	2000014c 	.word	0x2000014c
 8001d9c:	200000b4 	.word	0x200000b4
 8001da0:	200000b8 	.word	0x200000b8
 8001da4:	200000d8 	.word	0x200000d8
 8001da8:	20000158 	.word	0x20000158
 8001dac:	2000015c 	.word	0x2000015c
 8001db0:	20000160 	.word	0x20000160
 8001db4:	200000d4 	.word	0x200000d4
 8001db8:	20000164 	.word	0x20000164
 8001dbc:	200000bc 	.word	0x200000bc
 8001dc0:	447a0000 	.word	0x447a0000

08001dc4 <Reset_Encoders>:

// Resets or initialized odometry data based on input parameter
void Reset_Encoders(sOdom_t* new_odom){
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	last_left_enc  = 0;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <Reset_Encoders+0x54>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
	last_right_enc = 0;
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <Reset_Encoders+0x58>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
	curr_left_enc  = 0;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <Reset_Encoders+0x5c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
	curr_right_enc = 0;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <Reset_Encoders+0x60>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

	odom.x = new_odom->x;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <Reset_Encoders+0x64>)
 8001dea:	6013      	str	r3, [r2, #0]
	odom.y = new_odom->y;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <Reset_Encoders+0x64>)
 8001df2:	6053      	str	r3, [r2, #4]
	odom.theta = new_odom->theta;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <Reset_Encoders+0x64>)
 8001dfa:	6093      	str	r3, [r2, #8]
	odom.left_speed = 0;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <Reset_Encoders+0x64>)
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
	odom.right_speed = 0;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <Reset_Encoders+0x64>)
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	20000148 	.word	0x20000148
 8001e1c:	2000014c 	.word	0x2000014c
 8001e20:	20000150 	.word	0x20000150
 8001e24:	20000154 	.word	0x20000154
 8001e28:	200000bc 	.word	0x200000bc
 8001e2c:	00000000 	.word	0x00000000

08001e30 <Config>:

void Config(float diameter, float distance){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e3a:	edc7 0a00 	vstr	s1, [r7]
	wheel_diameter = diameter;
 8001e3e:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <Config+0x80>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6013      	str	r3, [r2, #0]
	wheel_distance = distance;
 8001e44:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <Config+0x84>)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6013      	str	r3, [r2, #0]

	inc_mm = (wheel_diameter*M_PI)/PPR;
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <Config+0x80>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb26 	bl	80004a0 <__aeabi_f2d>
 8001e54:	a312      	add	r3, pc, #72	; (adr r3, 8001ea0 <Config+0x70>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fb79 	bl	8000550 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	a310      	add	r3, pc, #64	; (adr r3, 8001ea8 <Config+0x78>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fc9a 	bl	80007a4 <__aeabi_ddiv>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fe2c 	bl	8000ad4 <__aeabi_d2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <Config+0x88>)
 8001e80:	6013      	str	r3, [r2, #0]
	inc_rad = inc_mm/wheel_distance;
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <Config+0x88>)
 8001e84:	edd3 6a00 	vldr	s13, [r3]
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <Config+0x84>)
 8001e8a:	ed93 7a00 	vldr	s14, [r3]
 8001e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <Config+0x8c>)
 8001e94:	edc3 7a00 	vstr	s15, [r3]
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	54442d18 	.word	0x54442d18
 8001ea4:	400921fb 	.word	0x400921fb
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	40a11000 	.word	0x40a11000
 8001eb0:	200000d0 	.word	0x200000d0
 8001eb4:	200000d4 	.word	0x200000d4
 8001eb8:	200000d8 	.word	0x200000d8
 8001ebc:	200000dc 	.word	0x200000dc

08001ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_MspInit+0x4c>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001efe:	2007      	movs	r0, #7
 8001f00:	f000 fd54 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f14:	e7fe      	b.n	8001f14 <NMI_Handler+0x4>

08001f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <MemManage_Handler+0x4>

08001f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5c:	f000 fc54 	bl	8002808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <SystemInit+0x20>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <SystemInit+0x20>)
 8001f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_SetPriorityGrouping>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_EnableIRQ>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <__NVIC_EnableIRQ+0x38>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <buffer_write>:
	volatile uint8_t head;
	volatile uint8_t tail;
}circular_buff;

static inline void buffer_write(circular_buff* buf, uint8_t x)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	70fb      	strb	r3, [r7, #3]
	buf->buffer[buf->tail]=x;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	7a52      	ldrb	r2, [r2, #9]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	4413      	add	r3, r2
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	701a      	strb	r2, [r3, #0]

	if ((buf->tail + 1) >= buf->len)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7a5b      	ldrb	r3, [r3, #9]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	7812      	ldrb	r2, [r2, #0]
 80020ee:	4293      	cmp	r3, r2
 80020f0:	db03      	blt.n	80020fa <buffer_write+0x34>
		buf->tail = 0;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	725a      	strb	r2, [r3, #9]
	else
		buf->tail++;
}
 80020f8:	e006      	b.n	8002108 <buffer_write+0x42>
		buf->tail++;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7a5b      	ldrb	r3, [r3, #9]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3301      	adds	r3, #1
 8002102:	b2da      	uxtb	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	725a      	strb	r2, [r3, #9]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <buffer_read>:

static inline uint8_t buffer_read(circular_buff* buf)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	if (buf->head == buf->tail)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7a1b      	ldrb	r3, [r3, #8]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7a5b      	ldrb	r3, [r3, #9]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	429a      	cmp	r2, r3
 800212a:	d101      	bne.n	8002130 <buffer_read+0x1c>
		return '\0';
 800212c:	2300      	movs	r3, #0
 800212e:	e01b      	b.n	8002168 <buffer_read+0x54>

	uint8_t read = buf->buffer[buf->head];
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	7a12      	ldrb	r2, [r2, #8]
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	4413      	add	r3, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	73fb      	strb	r3, [r7, #15]

	if ((buf->head + 1) >= buf->len)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7a1b      	ldrb	r3, [r3, #8]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3301      	adds	r3, #1
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	4293      	cmp	r3, r2
 800214e:	db03      	blt.n	8002158 <buffer_read+0x44>
		buf->head = 0;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	721a      	strb	r2, [r3, #8]
 8002156:	e006      	b.n	8002166 <buffer_read+0x52>
	else
		buf->head++;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7a1b      	ldrb	r3, [r3, #8]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	3301      	adds	r3, #1
 8002160:	b2da      	uxtb	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	721a      	strb	r2, [r3, #8]

	return read;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <buffer_check>:

static inline uint8_t buffer_check(circular_buff* buf, uint8_t pos)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
	if ((buf->head == buf->tail) ||
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7a1b      	ldrb	r3, [r3, #8]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7a5b      	ldrb	r3, [r3, #9]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	429a      	cmp	r2, r3
 800218e:	d00b      	beq.n	80021a8 <buffer_check+0x34>
		(pos < buf->head && pos > buf->tail)) //||(pos < buf->tail && pos > buf->head))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7a1b      	ldrb	r3, [r3, #8]
 8002194:	b2db      	uxtb	r3, r3
	if ((buf->head == buf->tail) ||
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <buffer_check+0x38>
		(pos < buf->head && pos > buf->tail)) //||(pos < buf->tail && pos > buf->head))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7a5b      	ldrb	r3, [r3, #9]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d901      	bls.n	80021ac <buffer_check+0x38>
		return '\0';
 80021a8:	2300      	movs	r3, #0
 80021aa:	e006      	b.n	80021ba <buffer_check+0x46>

	uint8_t read = buf->buffer[pos];
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	73fb      	strb	r3, [r7, #15]

	return read;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <USART2_Init>:
	uint8_t u[4];
}convert_float;

// Initializes USART2 over pins PA2 and PA3 with interrupt handler
void USART2_Init()
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
	uint32_t uartdiv = SystemCoreClock/2 / BAUDRATE;
 80021ce:	4b28      	ldr	r3, [pc, #160]	; (8002270 <USART2_Init+0xa8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a28      	ldr	r2, [pc, #160]	; (8002274 <USART2_Init+0xac>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	0c5b      	lsrs	r3, r3, #17
 80021da:	607b      	str	r3, [r7, #4]
    uint32_t uart_pri_encoding = NVIC_EncodePriority( 0, 1, 0 );
 80021dc:	2200      	movs	r2, #0
 80021de:	2101      	movs	r1, #1
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7ff ff3d 	bl	8002060 <NVIC_EncodePriority>
 80021e6:	6038      	str	r0, [r7, #0]

	// Enable clock for port A
	RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOAEN );
 80021e8:	4b23      	ldr	r3, [pc, #140]	; (8002278 <USART2_Init+0xb0>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4a22      	ldr	r2, [pc, #136]	; (8002278 <USART2_Init+0xb0>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6313      	str	r3, [r2, #48]	; 0x30

	// Clock source for USART2
	RCC->APB1ENR |= ( RCC_APB1ENR_USART2EN );
 80021f4:	4b20      	ldr	r3, [pc, #128]	; (8002278 <USART2_Init+0xb0>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <USART2_Init+0xb0>)
 80021fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fe:	6413      	str	r3, [r2, #64]	; 0x40

	// PA2-3 AF7
	UART_Port->MODER &= ~(0b11 << 2*TX_Pin | 0b11 << 2*RX_PIN);
 8002200:	4b1e      	ldr	r3, [pc, #120]	; (800227c <USART2_Init+0xb4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <USART2_Init+0xb4>)
 8002206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800220a:	6013      	str	r3, [r2, #0]
	UART_Port->MODER |=  (0b10 << 2*TX_Pin | 0b10 << 2*RX_PIN);
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <USART2_Init+0xb4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1a      	ldr	r2, [pc, #104]	; (800227c <USART2_Init+0xb4>)
 8002212:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002216:	6013      	str	r3, [r2, #0]

	UART_Port->AFR[0] &= ~(0b1111 << 4*TX_Pin | 0b1111 << 4*RX_PIN);
 8002218:	4b18      	ldr	r3, [pc, #96]	; (800227c <USART2_Init+0xb4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a17      	ldr	r2, [pc, #92]	; (800227c <USART2_Init+0xb4>)
 800221e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002222:	6213      	str	r3, [r2, #32]
	UART_Port->AFR[0] |=  (0b0111 << 4*TX_Pin | 0b0111 << 4*RX_PIN);
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <USART2_Init+0xb4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <USART2_Init+0xb4>)
 800222a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800222e:	6213      	str	r3, [r2, #32]

    // Setup the NVIC to enable interrupts.
    NVIC_SetPriorityGrouping( 0 );
 8002230:	2000      	movs	r0, #0
 8002232:	f7ff fea9 	bl	8001f88 <__NVIC_SetPriorityGrouping>
    // UART receive interrupts should be high priority.
    NVIC_SetPriority( USART2_IRQn, uart_pri_encoding );
 8002236:	6839      	ldr	r1, [r7, #0]
 8002238:	2026      	movs	r0, #38	; 0x26
 800223a:	f7ff fee7 	bl	800200c <__NVIC_SetPriority>
    NVIC_EnableIRQ( USART2_IRQn );
 800223e:	2026      	movs	r0, #38	; 0x26
 8002240:	f7ff fec6 	bl	8001fd0 <__NVIC_EnableIRQ>

    // Set BaudRate to 115200
    USART2->BRR = ((uartdiv/16) << USART_BRR_DIV_Mantissa_Pos |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	011a      	lsls	r2, r3, #4
    			   (uartdiv%16) << USART_BRR_DIV_Fraction_Pos);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f003 030f 	and.w	r3, r3, #15
    USART2->BRR = ((uartdiv/16) << USART_BRR_DIV_Mantissa_Pos |
 8002250:	490b      	ldr	r1, [pc, #44]	; (8002280 <USART2_Init+0xb8>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]

    USART2->CR1 |= (USART_CR1_RE | USART_CR1_TE | USART_CR1_UE | USART_CR1_RXNEIE);
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <USART2_Init+0xb8>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <USART2_Init+0xb8>)
 800225c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002260:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8002264:	60d3      	str	r3, [r2, #12]
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200000e0 	.word	0x200000e0
 8002274:	91a2b3c5 	.word	0x91a2b3c5
 8002278:	40023800 	.word	0x40023800
 800227c:	40020000 	.word	0x40020000
 8002280:	40004400 	.word	0x40004400

08002284 <USART2_IRQHandler>:

// Interrupt handler for receiving data over UART
void USART2_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	if (USART2->SR & USART_SR_RXNE) {
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <USART2_IRQHandler+0x34>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00e      	beq.n	80022b2 <USART2_IRQHandler+0x2e>
	  c = USART2->DR;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <USART2_IRQHandler+0x34>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <USART2_IRQHandler+0x38>)
 800229c:	701a      	strb	r2, [r3, #0]
	  if (c != '\r')
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <USART2_IRQHandler+0x38>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b0d      	cmp	r3, #13
 80022a4:	d005      	beq.n	80022b2 <USART2_IRQHandler+0x2e>
		  buffer_write(&in_buf, c);
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <USART2_IRQHandler+0x38>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	4619      	mov	r1, r3
 80022ac:	4804      	ldr	r0, [pc, #16]	; (80022c0 <USART2_IRQHandler+0x3c>)
 80022ae:	f7ff ff0a 	bl	80020c6 <buffer_write>
	}
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40004400 	.word	0x40004400
 80022bc:	2000028d 	.word	0x2000028d
 80022c0:	200000e4 	.word	0x200000e4

080022c4 <UART_Interrupt_Init>:

// Configures timer TIM10 with interrupt every 1ms which check input buffer
void UART_Interrupt_Init()
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
	// Lower priority than UART IRQHandler, higher priority than PID
	uint32_t tim11_pri_encoding = NVIC_EncodePriority(0, 1, 1);
 80022ca:	2201      	movs	r2, #1
 80022cc:	2101      	movs	r1, #1
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff fec6 	bl	8002060 <NVIC_EncodePriority>
 80022d4:	6078      	str	r0, [r7, #4]

	// Clock source for TIM11
	RCC->APB2ENR |= ( RCC_APB2ENR_TIM11EN );
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <UART_Interrupt_Init+0x6c>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a15      	ldr	r2, [pc, #84]	; (8002330 <UART_Interrupt_Init+0x6c>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44

	// Clock setup for TIM11, 1ms
	UART_Tim->PSC = 2 - 1;
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <UART_Interrupt_Init+0x70>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
	UART_Tim->ARR = 42000 - 1;
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <UART_Interrupt_Init+0x70>)
 80022ea:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80022ee:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable immediate update of register on counter
	UART_Tim->EGR |= ( TIM_EGR_UG );
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <UART_Interrupt_Init+0x70>)
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <UART_Interrupt_Init+0x70>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6153      	str	r3, [r2, #20]

	// Enable interrupts for TIM11
	UART_Tim->DIER |= ( TIM_DIER_UIE );
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <UART_Interrupt_Init+0x70>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <UART_Interrupt_Init+0x70>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	60d3      	str	r3, [r2, #12]

	// Enable counter for TIM11
	UART_Tim->CR1 |= ( TIM_CR1_CEN );
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <UART_Interrupt_Init+0x70>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a09      	ldr	r2, [pc, #36]	; (8002334 <UART_Interrupt_Init+0x70>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]

	// Enable interrupt
	NVIC_SetPriorityGrouping( 0 );
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff fe37 	bl	8001f88 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority( TIM1_TRG_COM_TIM11_IRQn, tim11_pri_encoding );
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	201a      	movs	r0, #26
 800231e:	f7ff fe75 	bl	800200c <__NVIC_SetPriority>
	NVIC_EnableIRQ( TIM1_TRG_COM_TIM11_IRQn );
 8002322:	201a      	movs	r0, #26
 8002324:	f7ff fe54 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	40014800 	.word	0x40014800

08002338 <TIM1_TRG_COM_TIM11_IRQHandler>:

// Checks input buffer for messages from connected device
void TIM1_TRG_COM_TIM11_IRQHandler(void){
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0

	uart_interrupt_counter++;
 800233e:	4b57      	ldr	r3, [pc, #348]	; (800249c <TIM1_TRG_COM_TIM11_IRQHandler+0x164>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	4a55      	ldr	r2, [pc, #340]	; (800249c <TIM1_TRG_COM_TIM11_IRQHandler+0x164>)
 8002346:	6013      	str	r3, [r2, #0]

	if (uart_interrupt_counter % UART_TIME == 0){
 8002348:	4b54      	ldr	r3, [pc, #336]	; (800249c <TIM1_TRG_COM_TIM11_IRQHandler+0x164>)
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x168>)
 800234e:	fba3 2301 	umull	r2, r3, r3, r1
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	1aca      	subs	r2, r1, r3
 800235e:	2a00      	cmp	r2, #0
 8002360:	f040 8092 	bne.w	8002488 <TIM1_TRG_COM_TIM11_IRQHandler+0x150>
		// Reads buffer and discards message if it isn't valid
		Read_Buffer(recv);
 8002364:	484f      	ldr	r0, [pc, #316]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 8002366:	f000 f90d 	bl	8002584 <Read_Buffer>
		if (*recv != null){
 800236a:	4b4e      	ldr	r3, [pc, #312]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	4b4e      	ldr	r3, [pc, #312]	; (80024a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x170>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d06f      	beq.n	8002456 <TIM1_TRG_COM_TIM11_IRQHandler+0x11e>
			switch(recv[1]){
 8002376:	4b4b      	ldr	r3, [pc, #300]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	2b53      	cmp	r3, #83	; 0x53
 800237c:	d006      	beq.n	800238c <TIM1_TRG_COM_TIM11_IRQHandler+0x54>
 800237e:	2b53      	cmp	r3, #83	; 0x53
 8002380:	dc62      	bgt.n	8002448 <TIM1_TRG_COM_TIM11_IRQHandler+0x110>
 8002382:	2b43      	cmp	r3, #67	; 0x43
 8002384:	d048      	beq.n	8002418 <TIM1_TRG_COM_TIM11_IRQHandler+0xe0>
 8002386:	2b49      	cmp	r3, #73	; 0x49
 8002388:	d01b      	beq.n	80023c2 <TIM1_TRG_COM_TIM11_IRQHandler+0x8a>

				memset(recv, 0, sizeof recv);
				break;
			default:
				// TODO handle message that doesn't exist
				break;
 800238a:	e05d      	b.n	8002448 <TIM1_TRG_COM_TIM11_IRQHandler+0x110>
				float left_speed = Read_Float(recv, 3);
 800238c:	2103      	movs	r1, #3
 800238e:	4845      	ldr	r0, [pc, #276]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 8002390:	f000 f894 	bl	80024bc <Read_Float>
 8002394:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				float right_speed = Read_Float(recv, 7);
 8002398:	2107      	movs	r1, #7
 800239a:	4842      	ldr	r0, [pc, #264]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 800239c:	f000 f88e 	bl	80024bc <Read_Float>
 80023a0:	ed87 0a08 	vstr	s0, [r7, #32]
				Set_Motor_Speed(left_speed, right_speed);
 80023a4:	edd7 0a08 	vldr	s1, [r7, #32]
 80023a8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80023ac:	f7ff f95c 	bl	8001668 <Set_Motor_Speed>
				bad_msg_counter = 0;
 80023b0:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <TIM1_TRG_COM_TIM11_IRQHandler+0x174>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
				memset(recv, 0, sizeof recv);
 80023b6:	2214      	movs	r2, #20
 80023b8:	2100      	movs	r1, #0
 80023ba:	483a      	ldr	r0, [pc, #232]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 80023bc:	f001 f912 	bl	80035e4 <memset>
				break;
 80023c0:	e043      	b.n	800244a <TIM1_TRG_COM_TIM11_IRQHandler+0x112>
						.x = Read_Float(recv, 3),
 80023c2:	2103      	movs	r1, #3
 80023c4:	4837      	ldr	r0, [pc, #220]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 80023c6:	f000 f879 	bl	80024bc <Read_Float>
 80023ca:	eef0 7a40 	vmov.f32	s15, s0
				sOdom_t odom = {
 80023ce:	edc7 7a01 	vstr	s15, [r7, #4]
						.y = Read_Float(recv, 7),
 80023d2:	2107      	movs	r1, #7
 80023d4:	4833      	ldr	r0, [pc, #204]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 80023d6:	f000 f871 	bl	80024bc <Read_Float>
 80023da:	eef0 7a40 	vmov.f32	s15, s0
				sOdom_t odom = {
 80023de:	edc7 7a02 	vstr	s15, [r7, #8]
						.theta = Read_Float(recv, 11),
 80023e2:	210b      	movs	r1, #11
 80023e4:	482f      	ldr	r0, [pc, #188]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 80023e6:	f000 f869 	bl	80024bc <Read_Float>
 80023ea:	eef0 7a40 	vmov.f32	s15, s0
				sOdom_t odom = {
 80023ee:	edc7 7a03 	vstr	s15, [r7, #12]
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
				Reset_Encoders(&odom);
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fcdf 	bl	8001dc4 <Reset_Encoders>
				bad_msg_counter = 0;
 8002406:	4b29      	ldr	r3, [pc, #164]	; (80024ac <TIM1_TRG_COM_TIM11_IRQHandler+0x174>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
				memset(recv, 0, sizeof recv);
 800240c:	2214      	movs	r2, #20
 800240e:	2100      	movs	r1, #0
 8002410:	4824      	ldr	r0, [pc, #144]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 8002412:	f001 f8e7 	bl	80035e4 <memset>
				break;
 8002416:	e018      	b.n	800244a <TIM1_TRG_COM_TIM11_IRQHandler+0x112>
				float diameter = Read_Float(recv, 3);
 8002418:	2103      	movs	r1, #3
 800241a:	4822      	ldr	r0, [pc, #136]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 800241c:	f000 f84e 	bl	80024bc <Read_Float>
 8002420:	ed87 0a07 	vstr	s0, [r7, #28]
				float distance = Read_Float(recv, 7);
 8002424:	2107      	movs	r1, #7
 8002426:	481f      	ldr	r0, [pc, #124]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 8002428:	f000 f848 	bl	80024bc <Read_Float>
 800242c:	ed87 0a06 	vstr	s0, [r7, #24]
				Config(diameter, distance);
 8002430:	edd7 0a06 	vldr	s1, [r7, #24]
 8002434:	ed97 0a07 	vldr	s0, [r7, #28]
 8002438:	f7ff fcfa 	bl	8001e30 <Config>
				memset(recv, 0, sizeof recv);
 800243c:	2214      	movs	r2, #20
 800243e:	2100      	movs	r1, #0
 8002440:	4818      	ldr	r0, [pc, #96]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 8002442:	f001 f8cf 	bl	80035e4 <memset>
				break;
 8002446:	e000      	b.n	800244a <TIM1_TRG_COM_TIM11_IRQHandler+0x112>
				break;
 8002448:	bf00      	nop
			}

			// Sends an acknowledge for the received message to the connected device
			Send_Command(ACK_TRANSMIT, &ack, 4);
 800244a:	2204      	movs	r2, #4
 800244c:	4918      	ldr	r1, [pc, #96]	; (80024b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x178>)
 800244e:	2041      	movs	r0, #65	; 0x41
 8002450:	f000 f904 	bl	800265c <Send_Command>
 8002454:	e018      	b.n	8002488 <TIM1_TRG_COM_TIM11_IRQHandler+0x150>
		}
		// If the whole message was not received in more than 30ms, discard the buffer
		else if (*recv == null && bad_msg_counter > 3){
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x16c>)
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x170>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d112      	bne.n	8002488 <TIM1_TRG_COM_TIM11_IRQHandler+0x150>
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <TIM1_TRG_COM_TIM11_IRQHandler+0x174>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d90e      	bls.n	8002488 <TIM1_TRG_COM_TIM11_IRQHandler+0x150>
			while(in_buf.head != in_buf.tail){
 800246a:	e002      	b.n	8002472 <TIM1_TRG_COM_TIM11_IRQHandler+0x13a>
				buffer_read(&in_buf);
 800246c:	4811      	ldr	r0, [pc, #68]	; (80024b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x17c>)
 800246e:	f7ff fe51 	bl	8002114 <buffer_read>
			while(in_buf.head != in_buf.tail){
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x17c>)
 8002474:	7a1b      	ldrb	r3, [r3, #8]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x17c>)
 800247a:	7a5b      	ldrb	r3, [r3, #9]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	429a      	cmp	r2, r3
 8002480:	d1f4      	bne.n	800246c <TIM1_TRG_COM_TIM11_IRQHandler+0x134>
			}
			bad_msg_counter = 0;
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <TIM1_TRG_COM_TIM11_IRQHandler+0x174>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
		}
	}

	// Clears interrupt flag so that other interrupts can work
	UART_Tim->SR &= ~TIM_SR_UIF;
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x180>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x180>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6113      	str	r3, [r2, #16]
}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000168 	.word	0x20000168
 80024a0:	cccccccd 	.word	0xcccccccd
 80024a4:	20000278 	.word	0x20000278
 80024a8:	2000028e 	.word	0x2000028e
 80024ac:	2000028c 	.word	0x2000028c
 80024b0:	200000fc 	.word	0x200000fc
 80024b4:	200000e4 	.word	0x200000e4
 80024b8:	40014800 	.word	0x40014800

080024bc <Read_Float>:


float Read_Float(uint8_t msg[], uint8_t start)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
	convert_float.u[0] = msg[start];
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <Read_Float+0x58>)
 80024d2:	701a      	strb	r2, [r3, #0]
	convert_float.u[1] = msg[start+1];
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	3301      	adds	r3, #1
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <Read_Float+0x58>)
 80024e0:	705a      	strb	r2, [r3, #1]
	convert_float.u[2] = msg[start+2];
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	3302      	adds	r3, #2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <Read_Float+0x58>)
 80024ee:	709a      	strb	r2, [r3, #2]
	convert_float.u[3] = msg[start+3];
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	3303      	adds	r3, #3
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <Read_Float+0x58>)
 80024fc:	70da      	strb	r2, [r3, #3]

	return convert_float.f;
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <Read_Float+0x58>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	ee07 3a90 	vmov	s15, r3
}
 8002506:	eeb0 0a67 	vmov.f32	s0, s15
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	20000290 	.word	0x20000290

08002518 <Send_Byte>:

// Sends a character over UART to the connected device
void Send_Byte(uint8_t data)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE)){};
 8002522:	bf00      	nop
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <Send_Byte+0x2c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f9      	beq.n	8002524 <Send_Byte+0xc>
	USART2->DR = data;
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <Send_Byte+0x2c>)
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	6053      	str	r3, [r2, #4]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40004400 	.word	0x40004400

08002548 <Send_Buffer>:

// Sends contents of output buffer to the connected device
void Send_Buffer()
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	while(out_buf.head != out_buf.tail){
 800254c:	e00b      	b.n	8002566 <Send_Buffer+0x1e>
		send_data = buffer_read(&out_buf);
 800254e:	480b      	ldr	r0, [pc, #44]	; (800257c <Send_Buffer+0x34>)
 8002550:	f7ff fde0 	bl	8002114 <buffer_read>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <Send_Buffer+0x38>)
 800255a:	701a      	strb	r2, [r3, #0]
		Send_Byte(send_data);
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <Send_Buffer+0x38>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ffd9 	bl	8002518 <Send_Byte>
	while(out_buf.head != out_buf.tail){
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <Send_Buffer+0x34>)
 8002568:	7a1b      	ldrb	r3, [r3, #8]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <Send_Buffer+0x34>)
 800256e:	7a5b      	ldrb	r3, [r3, #9]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	429a      	cmp	r2, r3
 8002574:	d1eb      	bne.n	800254e <Send_Buffer+0x6>
	}
}
 8002576:	bf00      	nop
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200000f0 	.word	0x200000f0
 8002580:	20000275 	.word	0x20000275

08002584 <Read_Buffer>:

// Returns a complete message from input buffer if it is valid
void Read_Buffer(uint8_t* recv_data)
{
 8002584:	b590      	push	{r4, r7, lr}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	first = buffer_check(&in_buf, in_buf.head);
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <Read_Buffer+0xc0>)
 800258e:	7a1b      	ldrb	r3, [r3, #8]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	4619      	mov	r1, r3
 8002594:	482b      	ldr	r0, [pc, #172]	; (8002644 <Read_Buffer+0xc0>)
 8002596:	f7ff fded 	bl	8002174 <buffer_check>
 800259a:	4603      	mov	r3, r0
 800259c:	461a      	mov	r2, r3
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <Read_Buffer+0xc4>)
 80025a0:	701a      	strb	r2, [r3, #0]
	len   = buffer_check(&in_buf, in_buf.head+2);
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <Read_Buffer+0xc0>)
 80025a4:	7a1b      	ldrb	r3, [r3, #8]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3302      	adds	r3, #2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4619      	mov	r1, r3
 80025ae:	4825      	ldr	r0, [pc, #148]	; (8002644 <Read_Buffer+0xc0>)
 80025b0:	f7ff fde0 	bl	8002174 <buffer_check>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <Read_Buffer+0xc8>)
 80025ba:	701a      	strb	r2, [r3, #0]
	last  = buffer_check(&in_buf, in_buf.head+len);
 80025bc:	4b21      	ldr	r3, [pc, #132]	; (8002644 <Read_Buffer+0xc0>)
 80025be:	7a1b      	ldrb	r3, [r3, #8]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <Read_Buffer+0xc8>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4619      	mov	r1, r3
 80025cc:	481d      	ldr	r0, [pc, #116]	; (8002644 <Read_Buffer+0xc0>)
 80025ce:	f7ff fdd1 	bl	8002174 <buffer_check>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <Read_Buffer+0xcc>)
 80025d8:	701a      	strb	r2, [r3, #0]

	if(first == START && last == STOP && len > 0){
 80025da:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <Read_Buffer+0xc4>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2bfa      	cmp	r3, #250	; 0xfa
 80025e0:	d11c      	bne.n	800261c <Read_Buffer+0x98>
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <Read_Buffer+0xcc>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2bfb      	cmp	r3, #251	; 0xfb
 80025e8:	d118      	bne.n	800261c <Read_Buffer+0x98>
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <Read_Buffer+0xc8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d014      	beq.n	800261c <Read_Buffer+0x98>
		for(uint8_t i=0; i<len+2; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e00a      	b.n	800260e <Read_Buffer+0x8a>
			recv_data[i] = buffer_read(&in_buf);
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	18d4      	adds	r4, r2, r3
 80025fe:	4811      	ldr	r0, [pc, #68]	; (8002644 <Read_Buffer+0xc0>)
 8002600:	f7ff fd88 	bl	8002114 <buffer_read>
 8002604:	4603      	mov	r3, r0
 8002606:	7023      	strb	r3, [r4, #0]
		for(uint8_t i=0; i<len+2; i++)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	3301      	adds	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <Read_Buffer+0xc8>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	429a      	cmp	r2, r3
 8002618:	daee      	bge.n	80025f8 <Read_Buffer+0x74>
 800261a:	e00e      	b.n	800263a <Read_Buffer+0xb6>
	}
	else if(first == START){
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <Read_Buffer+0xc4>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2bfa      	cmp	r3, #250	; 0xfa
 8002622:	d10a      	bne.n	800263a <Read_Buffer+0xb6>
		bad_msg_counter++;
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <Read_Buffer+0xd0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	b2da      	uxtb	r2, r3
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <Read_Buffer+0xd0>)
 800262e:	701a      	strb	r2, [r3, #0]
		recv_data[0] = null;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <Read_Buffer+0xd4>)
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	701a      	strb	r2, [r3, #0]
	}
}
 8002638:	e7ff      	b.n	800263a <Read_Buffer+0xb6>
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	bf00      	nop
 8002644:	200000e4 	.word	0x200000e4
 8002648:	20000271 	.word	0x20000271
 800264c:	20000272 	.word	0x20000272
 8002650:	20000273 	.word	0x20000273
 8002654:	2000028c 	.word	0x2000028c
 8002658:	2000028e 	.word	0x2000028e

0800265c <Send_Command>:

// Constructs a message and sends it through the output buffer to the connected device
void Send_Command(uint8_t code, float value[], uint8_t len)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
 8002668:	4613      	mov	r3, r2
 800266a:	71bb      	strb	r3, [r7, #6]
	buffer_write(&out_buf, START);
 800266c:	21fa      	movs	r1, #250	; 0xfa
 800266e:	4825      	ldr	r0, [pc, #148]	; (8002704 <Send_Command+0xa8>)
 8002670:	f7ff fd29 	bl	80020c6 <buffer_write>
	buffer_write(&out_buf, code);
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	4619      	mov	r1, r3
 8002678:	4822      	ldr	r0, [pc, #136]	; (8002704 <Send_Command+0xa8>)
 800267a:	f7ff fd24 	bl	80020c6 <buffer_write>
	buffer_write(&out_buf, len+3);
 800267e:	79bb      	ldrb	r3, [r7, #6]
 8002680:	3303      	adds	r3, #3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4619      	mov	r1, r3
 8002686:	481f      	ldr	r0, [pc, #124]	; (8002704 <Send_Command+0xa8>)
 8002688:	f7ff fd1d 	bl	80020c6 <buffer_write>

	size = sizeof(value[0]);
 800268c:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <Send_Command+0xac>)
 800268e:	2204      	movs	r2, #4
 8002690:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<len/size; i++){
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e021      	b.n	80026dc <Send_Command+0x80>
		convert_float.f = value[i];
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1a      	ldr	r2, [pc, #104]	; (800270c <Send_Command+0xb0>)
 80026a4:	6013      	str	r3, [r2, #0]

		buffer_write(&out_buf, convert_float.u[0]);
 80026a6:	4b19      	ldr	r3, [pc, #100]	; (800270c <Send_Command+0xb0>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4815      	ldr	r0, [pc, #84]	; (8002704 <Send_Command+0xa8>)
 80026ae:	f7ff fd0a 	bl	80020c6 <buffer_write>
		buffer_write(&out_buf, convert_float.u[1]);
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <Send_Command+0xb0>)
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	4619      	mov	r1, r3
 80026b8:	4812      	ldr	r0, [pc, #72]	; (8002704 <Send_Command+0xa8>)
 80026ba:	f7ff fd04 	bl	80020c6 <buffer_write>
		buffer_write(&out_buf, convert_float.u[2]);
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <Send_Command+0xb0>)
 80026c0:	789b      	ldrb	r3, [r3, #2]
 80026c2:	4619      	mov	r1, r3
 80026c4:	480f      	ldr	r0, [pc, #60]	; (8002704 <Send_Command+0xa8>)
 80026c6:	f7ff fcfe 	bl	80020c6 <buffer_write>
		buffer_write(&out_buf, convert_float.u[3]);
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <Send_Command+0xb0>)
 80026cc:	78db      	ldrb	r3, [r3, #3]
 80026ce:	4619      	mov	r1, r3
 80026d0:	480c      	ldr	r0, [pc, #48]	; (8002704 <Send_Command+0xa8>)
 80026d2:	f7ff fcf8 	bl	80020c6 <buffer_write>
	for(uint8_t i=0; i<len/size; i++){
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	3301      	adds	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <Send_Command+0xac>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	79ba      	ldrb	r2, [r7, #6]
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d3d4      	bcc.n	8002698 <Send_Command+0x3c>
	}

	buffer_write(&out_buf, STOP);
 80026ee:	21fb      	movs	r1, #251	; 0xfb
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <Send_Command+0xa8>)
 80026f2:	f7ff fce8 	bl	80020c6 <buffer_write>
	Send_Buffer();
 80026f6:	f7ff ff27 	bl	8002548 <Send_Buffer>
}
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200000f0 	.word	0x200000f0
 8002708:	20000274 	.word	0x20000274
 800270c:	20000290 	.word	0x20000290

08002710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002748 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002714:	f7ff fc26 	bl	8001f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002718:	480c      	ldr	r0, [pc, #48]	; (800274c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800271a:	490d      	ldr	r1, [pc, #52]	; (8002750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002720:	e002      	b.n	8002728 <LoopCopyDataInit>

08002722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002726:	3304      	adds	r3, #4

08002728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800272c:	d3f9      	bcc.n	8002722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002730:	4c0a      	ldr	r4, [pc, #40]	; (800275c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002734:	e001      	b.n	800273a <LoopFillZerobss>

08002736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002738:	3204      	adds	r2, #4

0800273a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800273c:	d3fb      	bcc.n	8002736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800273e:	f000 ff59 	bl	80035f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002742:	f7fe fb95 	bl	8000e70 <main>
  bx  lr    
 8002746:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002750:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8002754:	08004978 	.word	0x08004978
  ldr r2, =_sbss
 8002758:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 800275c:	20000298 	.word	0x20000298

08002760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC_IRQHandler>
	...

08002764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_Init+0x40>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <HAL_Init+0x40>)
 800276e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_Init+0x40>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <HAL_Init+0x40>)
 800277a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <HAL_Init+0x40>)
 8002786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278c:	2003      	movs	r0, #3
 800278e:	f000 f90d 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002792:	2000      	movs	r0, #0
 8002794:	f000 f808 	bl	80027a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002798:	f7ff fb92 	bl	8001ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023c00 	.word	0x40023c00

080027a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_InitTick+0x54>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_InitTick+0x58>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4619      	mov	r1, r3
 80027ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027be:	fbb3 f3f1 	udiv	r3, r3, r1
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f917 	bl	80029fa <HAL_SYSTICK_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00e      	b.n	80027f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b0f      	cmp	r3, #15
 80027da:	d80a      	bhi.n	80027f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027dc:	2200      	movs	r2, #0
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027e4:	f000 f8ed 	bl	80029c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e8:	4a06      	ldr	r2, [pc, #24]	; (8002804 <HAL_InitTick+0x5c>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200000e0 	.word	0x200000e0
 8002800:	20000104 	.word	0x20000104
 8002804:	20000100 	.word	0x20000100

08002808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_IncTick+0x20>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_IncTick+0x24>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4413      	add	r3, r2
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <HAL_IncTick+0x24>)
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000104 	.word	0x20000104
 800282c:	20000294 	.word	0x20000294

08002830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return uwTick;
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_GetTick+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000294 	.word	0x20000294

08002848 <__NVIC_SetPriorityGrouping>:
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002864:	4013      	ands	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_GetPriorityGrouping>:
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	f003 0307 	and.w	r3, r3, #7
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_SetPriority>:
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	; (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002978:	d301      	bcc.n	800297e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297a:	2301      	movs	r3, #1
 800297c:	e00f      	b.n	800299e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <SysTick_Config+0x40>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002986:	210f      	movs	r1, #15
 8002988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800298c:	f7ff ff8e 	bl	80028ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <SysTick_Config+0x40>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <SysTick_Config+0x40>)
 8002998:	2207      	movs	r2, #7
 800299a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff47 	bl	8002848 <__NVIC_SetPriorityGrouping>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d4:	f7ff ff5c 	bl	8002890 <__NVIC_GetPriorityGrouping>
 80029d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff8e 	bl	8002900 <NVIC_EncodePriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5d 	bl	80028ac <__NVIC_SetPriority>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ffb0 	bl	8002968 <SysTick_Config>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	e159      	b.n	8002ce4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a30:	2201      	movs	r2, #1
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	f040 8148 	bne.w	8002cde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d005      	beq.n	8002a66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d130      	bne.n	8002ac8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2203      	movs	r2, #3
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 0201 	and.w	r2, r3, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d017      	beq.n	8002b04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d123      	bne.n	8002b58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	08da      	lsrs	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3208      	adds	r2, #8
 8002b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	220f      	movs	r2, #15
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	08da      	lsrs	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3208      	adds	r2, #8
 8002b52:	69b9      	ldr	r1, [r7, #24]
 8002b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0203 	and.w	r2, r3, #3
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80a2 	beq.w	8002cde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b57      	ldr	r3, [pc, #348]	; (8002cfc <HAL_GPIO_Init+0x2e8>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4a56      	ldr	r2, [pc, #344]	; (8002cfc <HAL_GPIO_Init+0x2e8>)
 8002ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8002baa:	4b54      	ldr	r3, [pc, #336]	; (8002cfc <HAL_GPIO_Init+0x2e8>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bb6:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_GPIO_Init+0x2ec>)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	3302      	adds	r3, #2
 8002bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	220f      	movs	r2, #15
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a49      	ldr	r2, [pc, #292]	; (8002d04 <HAL_GPIO_Init+0x2f0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d019      	beq.n	8002c16 <HAL_GPIO_Init+0x202>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a48      	ldr	r2, [pc, #288]	; (8002d08 <HAL_GPIO_Init+0x2f4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_GPIO_Init+0x1fe>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a47      	ldr	r2, [pc, #284]	; (8002d0c <HAL_GPIO_Init+0x2f8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00d      	beq.n	8002c0e <HAL_GPIO_Init+0x1fa>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a46      	ldr	r2, [pc, #280]	; (8002d10 <HAL_GPIO_Init+0x2fc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <HAL_GPIO_Init+0x1f6>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a45      	ldr	r2, [pc, #276]	; (8002d14 <HAL_GPIO_Init+0x300>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_GPIO_Init+0x1f2>
 8002c02:	2304      	movs	r3, #4
 8002c04:	e008      	b.n	8002c18 <HAL_GPIO_Init+0x204>
 8002c06:	2307      	movs	r3, #7
 8002c08:	e006      	b.n	8002c18 <HAL_GPIO_Init+0x204>
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e004      	b.n	8002c18 <HAL_GPIO_Init+0x204>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e002      	b.n	8002c18 <HAL_GPIO_Init+0x204>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <HAL_GPIO_Init+0x204>
 8002c16:	2300      	movs	r3, #0
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	f002 0203 	and.w	r2, r2, #3
 8002c1e:	0092      	lsls	r2, r2, #2
 8002c20:	4093      	lsls	r3, r2
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c28:	4935      	ldr	r1, [pc, #212]	; (8002d00 <HAL_GPIO_Init+0x2ec>)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	089b      	lsrs	r3, r3, #2
 8002c2e:	3302      	adds	r3, #2
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c36:	4b38      	ldr	r3, [pc, #224]	; (8002d18 <HAL_GPIO_Init+0x304>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c5a:	4a2f      	ldr	r2, [pc, #188]	; (8002d18 <HAL_GPIO_Init+0x304>)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c60:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_GPIO_Init+0x304>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c84:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <HAL_GPIO_Init+0x304>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <HAL_GPIO_Init+0x304>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cae:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_GPIO_Init+0x304>)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <HAL_GPIO_Init+0x304>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd8:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_GPIO_Init+0x304>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b0f      	cmp	r3, #15
 8002ce8:	f67f aea2 	bls.w	8002a30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3724      	adds	r7, #36	; 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40013800 	.word	0x40013800
 8002d04:	40020000 	.word	0x40020000
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40020c00 	.word	0x40020c00
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40013c00 	.word	0x40013c00

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e267      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d075      	beq.n	8002e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d3a:	4b88      	ldr	r3, [pc, #544]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d00c      	beq.n	8002d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d46:	4b85      	ldr	r3, [pc, #532]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d112      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d52:	4b82      	ldr	r3, [pc, #520]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5e:	d10b      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	4b7e      	ldr	r3, [pc, #504]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d05b      	beq.n	8002e24 <HAL_RCC_OscConfig+0x108>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d157      	bne.n	8002e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e242      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d80:	d106      	bne.n	8002d90 <HAL_RCC_OscConfig+0x74>
 8002d82:	4b76      	ldr	r3, [pc, #472]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a75      	ldr	r2, [pc, #468]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e01d      	b.n	8002dcc <HAL_RCC_OscConfig+0xb0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x98>
 8002d9a:	4b70      	ldr	r3, [pc, #448]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6f      	ldr	r2, [pc, #444]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b6d      	ldr	r3, [pc, #436]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6c      	ldr	r2, [pc, #432]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0xb0>
 8002db4:	4b69      	ldr	r3, [pc, #420]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a68      	ldr	r2, [pc, #416]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4b66      	ldr	r3, [pc, #408]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a65      	ldr	r2, [pc, #404]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d013      	beq.n	8002dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff fd2c 	bl	8002830 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7ff fd28 	bl	8002830 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e207      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b5b      	ldr	r3, [pc, #364]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0xc0>
 8002dfa:	e014      	b.n	8002e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7ff fd18 	bl	8002830 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e04:	f7ff fd14 	bl	8002830 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1f3      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	4b51      	ldr	r3, [pc, #324]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0xe8>
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d063      	beq.n	8002efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e32:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d11c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4a:	4b44      	ldr	r3, [pc, #272]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d116      	bne.n	8002e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_RCC_OscConfig+0x152>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e1c7      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4937      	ldr	r1, [pc, #220]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e82:	e03a      	b.n	8002efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <HAL_RCC_OscConfig+0x244>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7ff fccd 	bl	8002830 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7ff fcc9 	bl	8002830 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e1a8      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4925      	ldr	r1, [pc, #148]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
 8002ecc:	e015      	b.n	8002efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_OscConfig+0x244>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7ff fcac 	bl	8002830 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002edc:	f7ff fca8 	bl	8002830 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e187      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d036      	beq.n	8002f74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_RCC_OscConfig+0x248>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7ff fc8c 	bl	8002830 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1c:	f7ff fc88 	bl	8002830 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e167      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x200>
 8002f3a:	e01b      	b.n	8002f74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_OscConfig+0x248>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f42:	f7ff fc75 	bl	8002830 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	e00e      	b.n	8002f68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f4a:	f7ff fc71 	bl	8002830 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d907      	bls.n	8002f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e150      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	42470000 	.word	0x42470000
 8002f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ea      	bne.n	8002f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8097 	beq.w	80030b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f86:	4b81      	ldr	r3, [pc, #516]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b7d      	ldr	r3, [pc, #500]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	4a7c      	ldr	r2, [pc, #496]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa2:	4b7a      	ldr	r3, [pc, #488]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b77      	ldr	r3, [pc, #476]	; (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d118      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbe:	4b74      	ldr	r3, [pc, #464]	; (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a73      	ldr	r2, [pc, #460]	; (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fca:	f7ff fc31 	bl	8002830 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd2:	f7ff fc2d 	bl	8002830 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e10c      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x2ea>
 8002ff8:	4b64      	ldr	r3, [pc, #400]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a63      	ldr	r2, [pc, #396]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
 8003004:	e01c      	b.n	8003040 <HAL_RCC_OscConfig+0x324>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x30c>
 800300e:	4b5f      	ldr	r3, [pc, #380]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a5e      	ldr	r2, [pc, #376]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003014:	f043 0304 	orr.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
 800301a:	4b5c      	ldr	r3, [pc, #368]	; (800318c <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	4a5b      	ldr	r2, [pc, #364]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6713      	str	r3, [r2, #112]	; 0x70
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0x324>
 8003028:	4b58      	ldr	r3, [pc, #352]	; (800318c <HAL_RCC_OscConfig+0x470>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a57      	ldr	r2, [pc, #348]	; (800318c <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
 8003034:	4b55      	ldr	r3, [pc, #340]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4a54      	ldr	r2, [pc, #336]	; (800318c <HAL_RCC_OscConfig+0x470>)
 800303a:	f023 0304 	bic.w	r3, r3, #4
 800303e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d015      	beq.n	8003074 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7ff fbf2 	bl	8002830 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7ff fbee 	bl	8002830 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0cb      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003066:	4b49      	ldr	r3, [pc, #292]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0ee      	beq.n	8003050 <HAL_RCC_OscConfig+0x334>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003074:	f7ff fbdc 	bl	8002830 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307a:	e00a      	b.n	8003092 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7ff fbd8 	bl	8002830 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e0b5      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003092:	4b3e      	ldr	r3, [pc, #248]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1ee      	bne.n	800307c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a4:	4b39      	ldr	r3, [pc, #228]	; (800318c <HAL_RCC_OscConfig+0x470>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	4a38      	ldr	r2, [pc, #224]	; (800318c <HAL_RCC_OscConfig+0x470>)
 80030aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a1 	beq.w	80031fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ba:	4b34      	ldr	r3, [pc, #208]	; (800318c <HAL_RCC_OscConfig+0x470>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d05c      	beq.n	8003180 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d141      	bne.n	8003152 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b31      	ldr	r3, [pc, #196]	; (8003194 <HAL_RCC_OscConfig+0x478>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7ff fbac 	bl	8002830 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030dc:	f7ff fba8 	bl	8002830 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e087      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	4b27      	ldr	r3, [pc, #156]	; (800318c <HAL_RCC_OscConfig+0x470>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	019b      	lsls	r3, r3, #6
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	3b01      	subs	r3, #1
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	491b      	ldr	r1, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_RCC_OscConfig+0x478>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7ff fb81 	bl	8002830 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003132:	f7ff fb7d 	bl	8002830 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e05c      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x416>
 8003150:	e054      	b.n	80031fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <HAL_RCC_OscConfig+0x478>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7ff fb6a 	bl	8002830 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003160:	f7ff fb66 	bl	8002830 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e045      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x444>
 800317e:	e03d      	b.n	80031fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e038      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000
 8003194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x4ec>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d028      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d121      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d11a      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d111      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	3b01      	subs	r3, #1
 80031e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d107      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800

0800320c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0cc      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b68      	ldr	r3, [pc, #416]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d90c      	bls.n	8003248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b65      	ldr	r3, [pc, #404]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0b8      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003260:	4b59      	ldr	r3, [pc, #356]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800326a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003278:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b50      	ldr	r3, [pc, #320]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	494d      	ldr	r1, [pc, #308]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d044      	beq.n	800332c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d119      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b3f      	ldr	r3, [pc, #252]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e06f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e067      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	4b37      	ldr	r3, [pc, #220]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 0203 	bic.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4934      	ldr	r1, [pc, #208]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032fc:	f7ff fa98 	bl	8002830 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	e00a      	b.n	800331a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003304:	f7ff fa94 	bl	8002830 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e04f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 020c 	and.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d1eb      	bne.n	8003304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d20c      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e032      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4916      	ldr	r1, [pc, #88]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	490e      	ldr	r1, [pc, #56]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003392:	f000 f821 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003396:	4602      	mov	r2, r0
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	490a      	ldr	r1, [pc, #40]	; (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	5ccb      	ldrb	r3, [r1, r3]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a09      	ldr	r2, [pc, #36]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_ClockConfig+0x1c8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f9f8 	bl	80027a8 <HAL_InitTick>

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023c00 	.word	0x40023c00
 80033c8:	40023800 	.word	0x40023800
 80033cc:	08004780 	.word	0x08004780
 80033d0:	200000e0 	.word	0x200000e0
 80033d4:	20000100 	.word	0x20000100

080033d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b094      	sub	sp, #80	; 0x50
 80033de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
 80033e4:	2300      	movs	r3, #0
 80033e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e8:	2300      	movs	r3, #0
 80033ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f0:	4b79      	ldr	r3, [pc, #484]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d00d      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x40>
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	f200 80e1 	bhi.w	80035c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x34>
 8003406:	2b04      	cmp	r3, #4
 8003408:	d003      	beq.n	8003412 <HAL_RCC_GetSysClockFreq+0x3a>
 800340a:	e0db      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b73      	ldr	r3, [pc, #460]	; (80035dc <HAL_RCC_GetSysClockFreq+0x204>)
 800340e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003410:	e0db      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003412:	4b73      	ldr	r3, [pc, #460]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003416:	e0d8      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003418:	4b6f      	ldr	r3, [pc, #444]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003422:	4b6d      	ldr	r3, [pc, #436]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d063      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342e:	4b6a      	ldr	r3, [pc, #424]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	2200      	movs	r2, #0
 8003436:	63bb      	str	r3, [r7, #56]	; 0x38
 8003438:	63fa      	str	r2, [r7, #60]	; 0x3c
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
 8003442:	2300      	movs	r3, #0
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
 8003446:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800344a:	4622      	mov	r2, r4
 800344c:	462b      	mov	r3, r5
 800344e:	f04f 0000 	mov.w	r0, #0
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	0159      	lsls	r1, r3, #5
 8003458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345c:	0150      	lsls	r0, r2, #5
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4621      	mov	r1, r4
 8003464:	1a51      	subs	r1, r2, r1
 8003466:	6139      	str	r1, [r7, #16]
 8003468:	4629      	mov	r1, r5
 800346a:	eb63 0301 	sbc.w	r3, r3, r1
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800347c:	4659      	mov	r1, fp
 800347e:	018b      	lsls	r3, r1, #6
 8003480:	4651      	mov	r1, sl
 8003482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003486:	4651      	mov	r1, sl
 8003488:	018a      	lsls	r2, r1, #6
 800348a:	4651      	mov	r1, sl
 800348c:	ebb2 0801 	subs.w	r8, r2, r1
 8003490:	4659      	mov	r1, fp
 8003492:	eb63 0901 	sbc.w	r9, r3, r1
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034aa:	4690      	mov	r8, r2
 80034ac:	4699      	mov	r9, r3
 80034ae:	4623      	mov	r3, r4
 80034b0:	eb18 0303 	adds.w	r3, r8, r3
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	462b      	mov	r3, r5
 80034b8:	eb49 0303 	adc.w	r3, r9, r3
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034ca:	4629      	mov	r1, r5
 80034cc:	024b      	lsls	r3, r1, #9
 80034ce:	4621      	mov	r1, r4
 80034d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034d4:	4621      	mov	r1, r4
 80034d6:	024a      	lsls	r2, r1, #9
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034de:	2200      	movs	r2, #0
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034e8:	f7fd fb44 	bl	8000b74 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4613      	mov	r3, r2
 80034f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f4:	e058      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f6:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	099b      	lsrs	r3, r3, #6
 80034fc:	2200      	movs	r2, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	4611      	mov	r1, r2
 8003502:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003506:	623b      	str	r3, [r7, #32]
 8003508:	2300      	movs	r3, #0
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
 800350c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003510:	4642      	mov	r2, r8
 8003512:	464b      	mov	r3, r9
 8003514:	f04f 0000 	mov.w	r0, #0
 8003518:	f04f 0100 	mov.w	r1, #0
 800351c:	0159      	lsls	r1, r3, #5
 800351e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003522:	0150      	lsls	r0, r2, #5
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4641      	mov	r1, r8
 800352a:	ebb2 0a01 	subs.w	sl, r2, r1
 800352e:	4649      	mov	r1, r9
 8003530:	eb63 0b01 	sbc.w	fp, r3, r1
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003540:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003544:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003548:	ebb2 040a 	subs.w	r4, r2, sl
 800354c:	eb63 050b 	sbc.w	r5, r3, fp
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	00eb      	lsls	r3, r5, #3
 800355a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800355e:	00e2      	lsls	r2, r4, #3
 8003560:	4614      	mov	r4, r2
 8003562:	461d      	mov	r5, r3
 8003564:	4643      	mov	r3, r8
 8003566:	18e3      	adds	r3, r4, r3
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	464b      	mov	r3, r9
 800356c:	eb45 0303 	adc.w	r3, r5, r3
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800357e:	4629      	mov	r1, r5
 8003580:	028b      	lsls	r3, r1, #10
 8003582:	4621      	mov	r1, r4
 8003584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003588:	4621      	mov	r1, r4
 800358a:	028a      	lsls	r2, r1, #10
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003592:	2200      	movs	r2, #0
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	61fa      	str	r2, [r7, #28]
 8003598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800359c:	f7fd faea 	bl	8000b74 <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4613      	mov	r3, r2
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	3301      	adds	r3, #1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035c2:	e002      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetSysClockFreq+0x204>)
 80035c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3750      	adds	r7, #80	; 0x50
 80035d0:	46bd      	mov	sp, r7
 80035d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800
 80035dc:	00f42400 	.word	0x00f42400
 80035e0:	007a1200 	.word	0x007a1200

080035e4 <memset>:
 80035e4:	4402      	add	r2, r0
 80035e6:	4603      	mov	r3, r0
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d100      	bne.n	80035ee <memset+0xa>
 80035ec:	4770      	bx	lr
 80035ee:	f803 1b01 	strb.w	r1, [r3], #1
 80035f2:	e7f9      	b.n	80035e8 <memset+0x4>

080035f4 <__libc_init_array>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	4d0d      	ldr	r5, [pc, #52]	; (800362c <__libc_init_array+0x38>)
 80035f8:	4c0d      	ldr	r4, [pc, #52]	; (8003630 <__libc_init_array+0x3c>)
 80035fa:	1b64      	subs	r4, r4, r5
 80035fc:	10a4      	asrs	r4, r4, #2
 80035fe:	2600      	movs	r6, #0
 8003600:	42a6      	cmp	r6, r4
 8003602:	d109      	bne.n	8003618 <__libc_init_array+0x24>
 8003604:	4d0b      	ldr	r5, [pc, #44]	; (8003634 <__libc_init_array+0x40>)
 8003606:	4c0c      	ldr	r4, [pc, #48]	; (8003638 <__libc_init_array+0x44>)
 8003608:	f001 f8ae 	bl	8004768 <_init>
 800360c:	1b64      	subs	r4, r4, r5
 800360e:	10a4      	asrs	r4, r4, #2
 8003610:	2600      	movs	r6, #0
 8003612:	42a6      	cmp	r6, r4
 8003614:	d105      	bne.n	8003622 <__libc_init_array+0x2e>
 8003616:	bd70      	pop	{r4, r5, r6, pc}
 8003618:	f855 3b04 	ldr.w	r3, [r5], #4
 800361c:	4798      	blx	r3
 800361e:	3601      	adds	r6, #1
 8003620:	e7ee      	b.n	8003600 <__libc_init_array+0xc>
 8003622:	f855 3b04 	ldr.w	r3, [r5], #4
 8003626:	4798      	blx	r3
 8003628:	3601      	adds	r6, #1
 800362a:	e7f2      	b.n	8003612 <__libc_init_array+0x1e>
 800362c:	08004970 	.word	0x08004970
 8003630:	08004970 	.word	0x08004970
 8003634:	08004970 	.word	0x08004970
 8003638:	08004974 	.word	0x08004974
 800363c:	00000000 	.word	0x00000000

08003640 <cos>:
 8003640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003642:	ec53 2b10 	vmov	r2, r3, d0
 8003646:	4826      	ldr	r0, [pc, #152]	; (80036e0 <cos+0xa0>)
 8003648:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800364c:	4281      	cmp	r1, r0
 800364e:	dc06      	bgt.n	800365e <cos+0x1e>
 8003650:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80036d8 <cos+0x98>
 8003654:	b005      	add	sp, #20
 8003656:	f85d eb04 	ldr.w	lr, [sp], #4
 800365a:	f000 b89d 	b.w	8003798 <__kernel_cos>
 800365e:	4821      	ldr	r0, [pc, #132]	; (80036e4 <cos+0xa4>)
 8003660:	4281      	cmp	r1, r0
 8003662:	dd09      	ble.n	8003678 <cos+0x38>
 8003664:	ee10 0a10 	vmov	r0, s0
 8003668:	4619      	mov	r1, r3
 800366a:	f7fc fdb9 	bl	80001e0 <__aeabi_dsub>
 800366e:	ec41 0b10 	vmov	d0, r0, r1
 8003672:	b005      	add	sp, #20
 8003674:	f85d fb04 	ldr.w	pc, [sp], #4
 8003678:	4668      	mov	r0, sp
 800367a:	f000 fa15 	bl	8003aa8 <__ieee754_rem_pio2>
 800367e:	f000 0003 	and.w	r0, r0, #3
 8003682:	2801      	cmp	r0, #1
 8003684:	d00b      	beq.n	800369e <cos+0x5e>
 8003686:	2802      	cmp	r0, #2
 8003688:	d016      	beq.n	80036b8 <cos+0x78>
 800368a:	b9e0      	cbnz	r0, 80036c6 <cos+0x86>
 800368c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003690:	ed9d 0b00 	vldr	d0, [sp]
 8003694:	f000 f880 	bl	8003798 <__kernel_cos>
 8003698:	ec51 0b10 	vmov	r0, r1, d0
 800369c:	e7e7      	b.n	800366e <cos+0x2e>
 800369e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80036a2:	ed9d 0b00 	vldr	d0, [sp]
 80036a6:	f000 f93f 	bl	8003928 <__kernel_sin>
 80036aa:	ec53 2b10 	vmov	r2, r3, d0
 80036ae:	ee10 0a10 	vmov	r0, s0
 80036b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80036b6:	e7da      	b.n	800366e <cos+0x2e>
 80036b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80036bc:	ed9d 0b00 	vldr	d0, [sp]
 80036c0:	f000 f86a 	bl	8003798 <__kernel_cos>
 80036c4:	e7f1      	b.n	80036aa <cos+0x6a>
 80036c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80036ca:	ed9d 0b00 	vldr	d0, [sp]
 80036ce:	2001      	movs	r0, #1
 80036d0:	f000 f92a 	bl	8003928 <__kernel_sin>
 80036d4:	e7e0      	b.n	8003698 <cos+0x58>
 80036d6:	bf00      	nop
	...
 80036e0:	3fe921fb 	.word	0x3fe921fb
 80036e4:	7fefffff 	.word	0x7fefffff

080036e8 <sin>:
 80036e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036ea:	ec53 2b10 	vmov	r2, r3, d0
 80036ee:	4828      	ldr	r0, [pc, #160]	; (8003790 <sin+0xa8>)
 80036f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80036f4:	4281      	cmp	r1, r0
 80036f6:	dc07      	bgt.n	8003708 <sin+0x20>
 80036f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003788 <sin+0xa0>
 80036fc:	2000      	movs	r0, #0
 80036fe:	b005      	add	sp, #20
 8003700:	f85d eb04 	ldr.w	lr, [sp], #4
 8003704:	f000 b910 	b.w	8003928 <__kernel_sin>
 8003708:	4822      	ldr	r0, [pc, #136]	; (8003794 <sin+0xac>)
 800370a:	4281      	cmp	r1, r0
 800370c:	dd09      	ble.n	8003722 <sin+0x3a>
 800370e:	ee10 0a10 	vmov	r0, s0
 8003712:	4619      	mov	r1, r3
 8003714:	f7fc fd64 	bl	80001e0 <__aeabi_dsub>
 8003718:	ec41 0b10 	vmov	d0, r0, r1
 800371c:	b005      	add	sp, #20
 800371e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003722:	4668      	mov	r0, sp
 8003724:	f000 f9c0 	bl	8003aa8 <__ieee754_rem_pio2>
 8003728:	f000 0003 	and.w	r0, r0, #3
 800372c:	2801      	cmp	r0, #1
 800372e:	d00c      	beq.n	800374a <sin+0x62>
 8003730:	2802      	cmp	r0, #2
 8003732:	d011      	beq.n	8003758 <sin+0x70>
 8003734:	b9f0      	cbnz	r0, 8003774 <sin+0x8c>
 8003736:	ed9d 1b02 	vldr	d1, [sp, #8]
 800373a:	ed9d 0b00 	vldr	d0, [sp]
 800373e:	2001      	movs	r0, #1
 8003740:	f000 f8f2 	bl	8003928 <__kernel_sin>
 8003744:	ec51 0b10 	vmov	r0, r1, d0
 8003748:	e7e6      	b.n	8003718 <sin+0x30>
 800374a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800374e:	ed9d 0b00 	vldr	d0, [sp]
 8003752:	f000 f821 	bl	8003798 <__kernel_cos>
 8003756:	e7f5      	b.n	8003744 <sin+0x5c>
 8003758:	ed9d 1b02 	vldr	d1, [sp, #8]
 800375c:	ed9d 0b00 	vldr	d0, [sp]
 8003760:	2001      	movs	r0, #1
 8003762:	f000 f8e1 	bl	8003928 <__kernel_sin>
 8003766:	ec53 2b10 	vmov	r2, r3, d0
 800376a:	ee10 0a10 	vmov	r0, s0
 800376e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003772:	e7d1      	b.n	8003718 <sin+0x30>
 8003774:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003778:	ed9d 0b00 	vldr	d0, [sp]
 800377c:	f000 f80c 	bl	8003798 <__kernel_cos>
 8003780:	e7f1      	b.n	8003766 <sin+0x7e>
 8003782:	bf00      	nop
 8003784:	f3af 8000 	nop.w
	...
 8003790:	3fe921fb 	.word	0x3fe921fb
 8003794:	7fefffff 	.word	0x7fefffff

08003798 <__kernel_cos>:
 8003798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800379c:	ec57 6b10 	vmov	r6, r7, d0
 80037a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80037a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80037a8:	ed8d 1b00 	vstr	d1, [sp]
 80037ac:	da07      	bge.n	80037be <__kernel_cos+0x26>
 80037ae:	ee10 0a10 	vmov	r0, s0
 80037b2:	4639      	mov	r1, r7
 80037b4:	f7fd f966 	bl	8000a84 <__aeabi_d2iz>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	f000 8088 	beq.w	80038ce <__kernel_cos+0x136>
 80037be:	4632      	mov	r2, r6
 80037c0:	463b      	mov	r3, r7
 80037c2:	4630      	mov	r0, r6
 80037c4:	4639      	mov	r1, r7
 80037c6:	f7fc fec3 	bl	8000550 <__aeabi_dmul>
 80037ca:	4b51      	ldr	r3, [pc, #324]	; (8003910 <__kernel_cos+0x178>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	4604      	mov	r4, r0
 80037d0:	460d      	mov	r5, r1
 80037d2:	f7fc febd 	bl	8000550 <__aeabi_dmul>
 80037d6:	a340      	add	r3, pc, #256	; (adr r3, 80038d8 <__kernel_cos+0x140>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	4682      	mov	sl, r0
 80037de:	468b      	mov	fp, r1
 80037e0:	4620      	mov	r0, r4
 80037e2:	4629      	mov	r1, r5
 80037e4:	f7fc feb4 	bl	8000550 <__aeabi_dmul>
 80037e8:	a33d      	add	r3, pc, #244	; (adr r3, 80038e0 <__kernel_cos+0x148>)
 80037ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ee:	f7fc fcf9 	bl	80001e4 <__adddf3>
 80037f2:	4622      	mov	r2, r4
 80037f4:	462b      	mov	r3, r5
 80037f6:	f7fc feab 	bl	8000550 <__aeabi_dmul>
 80037fa:	a33b      	add	r3, pc, #236	; (adr r3, 80038e8 <__kernel_cos+0x150>)
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f7fc fcee 	bl	80001e0 <__aeabi_dsub>
 8003804:	4622      	mov	r2, r4
 8003806:	462b      	mov	r3, r5
 8003808:	f7fc fea2 	bl	8000550 <__aeabi_dmul>
 800380c:	a338      	add	r3, pc, #224	; (adr r3, 80038f0 <__kernel_cos+0x158>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	f7fc fce7 	bl	80001e4 <__adddf3>
 8003816:	4622      	mov	r2, r4
 8003818:	462b      	mov	r3, r5
 800381a:	f7fc fe99 	bl	8000550 <__aeabi_dmul>
 800381e:	a336      	add	r3, pc, #216	; (adr r3, 80038f8 <__kernel_cos+0x160>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f7fc fcdc 	bl	80001e0 <__aeabi_dsub>
 8003828:	4622      	mov	r2, r4
 800382a:	462b      	mov	r3, r5
 800382c:	f7fc fe90 	bl	8000550 <__aeabi_dmul>
 8003830:	a333      	add	r3, pc, #204	; (adr r3, 8003900 <__kernel_cos+0x168>)
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f7fc fcd5 	bl	80001e4 <__adddf3>
 800383a:	4622      	mov	r2, r4
 800383c:	462b      	mov	r3, r5
 800383e:	f7fc fe87 	bl	8000550 <__aeabi_dmul>
 8003842:	4622      	mov	r2, r4
 8003844:	462b      	mov	r3, r5
 8003846:	f7fc fe83 	bl	8000550 <__aeabi_dmul>
 800384a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800384e:	4604      	mov	r4, r0
 8003850:	460d      	mov	r5, r1
 8003852:	4630      	mov	r0, r6
 8003854:	4639      	mov	r1, r7
 8003856:	f7fc fe7b 	bl	8000550 <__aeabi_dmul>
 800385a:	460b      	mov	r3, r1
 800385c:	4602      	mov	r2, r0
 800385e:	4629      	mov	r1, r5
 8003860:	4620      	mov	r0, r4
 8003862:	f7fc fcbd 	bl	80001e0 <__aeabi_dsub>
 8003866:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <__kernel_cos+0x17c>)
 8003868:	4598      	cmp	r8, r3
 800386a:	4606      	mov	r6, r0
 800386c:	460f      	mov	r7, r1
 800386e:	dc10      	bgt.n	8003892 <__kernel_cos+0xfa>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4650      	mov	r0, sl
 8003876:	4659      	mov	r1, fp
 8003878:	f7fc fcb2 	bl	80001e0 <__aeabi_dsub>
 800387c:	460b      	mov	r3, r1
 800387e:	4926      	ldr	r1, [pc, #152]	; (8003918 <__kernel_cos+0x180>)
 8003880:	4602      	mov	r2, r0
 8003882:	2000      	movs	r0, #0
 8003884:	f7fc fcac 	bl	80001e0 <__aeabi_dsub>
 8003888:	ec41 0b10 	vmov	d0, r0, r1
 800388c:	b003      	add	sp, #12
 800388e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003892:	4b22      	ldr	r3, [pc, #136]	; (800391c <__kernel_cos+0x184>)
 8003894:	4920      	ldr	r1, [pc, #128]	; (8003918 <__kernel_cos+0x180>)
 8003896:	4598      	cmp	r8, r3
 8003898:	bfcc      	ite	gt
 800389a:	4d21      	ldrgt	r5, [pc, #132]	; (8003920 <__kernel_cos+0x188>)
 800389c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80038a0:	2400      	movs	r4, #0
 80038a2:	4622      	mov	r2, r4
 80038a4:	462b      	mov	r3, r5
 80038a6:	2000      	movs	r0, #0
 80038a8:	f7fc fc9a 	bl	80001e0 <__aeabi_dsub>
 80038ac:	4622      	mov	r2, r4
 80038ae:	4680      	mov	r8, r0
 80038b0:	4689      	mov	r9, r1
 80038b2:	462b      	mov	r3, r5
 80038b4:	4650      	mov	r0, sl
 80038b6:	4659      	mov	r1, fp
 80038b8:	f7fc fc92 	bl	80001e0 <__aeabi_dsub>
 80038bc:	4632      	mov	r2, r6
 80038be:	463b      	mov	r3, r7
 80038c0:	f7fc fc8e 	bl	80001e0 <__aeabi_dsub>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4640      	mov	r0, r8
 80038ca:	4649      	mov	r1, r9
 80038cc:	e7da      	b.n	8003884 <__kernel_cos+0xec>
 80038ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003908 <__kernel_cos+0x170>
 80038d2:	e7db      	b.n	800388c <__kernel_cos+0xf4>
 80038d4:	f3af 8000 	nop.w
 80038d8:	be8838d4 	.word	0xbe8838d4
 80038dc:	bda8fae9 	.word	0xbda8fae9
 80038e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80038e4:	3e21ee9e 	.word	0x3e21ee9e
 80038e8:	809c52ad 	.word	0x809c52ad
 80038ec:	3e927e4f 	.word	0x3e927e4f
 80038f0:	19cb1590 	.word	0x19cb1590
 80038f4:	3efa01a0 	.word	0x3efa01a0
 80038f8:	16c15177 	.word	0x16c15177
 80038fc:	3f56c16c 	.word	0x3f56c16c
 8003900:	5555554c 	.word	0x5555554c
 8003904:	3fa55555 	.word	0x3fa55555
 8003908:	00000000 	.word	0x00000000
 800390c:	3ff00000 	.word	0x3ff00000
 8003910:	3fe00000 	.word	0x3fe00000
 8003914:	3fd33332 	.word	0x3fd33332
 8003918:	3ff00000 	.word	0x3ff00000
 800391c:	3fe90000 	.word	0x3fe90000
 8003920:	3fd20000 	.word	0x3fd20000
 8003924:	00000000 	.word	0x00000000

08003928 <__kernel_sin>:
 8003928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392c:	ed2d 8b04 	vpush	{d8-d9}
 8003930:	eeb0 8a41 	vmov.f32	s16, s2
 8003934:	eef0 8a61 	vmov.f32	s17, s3
 8003938:	ec55 4b10 	vmov	r4, r5, d0
 800393c:	b083      	sub	sp, #12
 800393e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003942:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003946:	9001      	str	r0, [sp, #4]
 8003948:	da06      	bge.n	8003958 <__kernel_sin+0x30>
 800394a:	ee10 0a10 	vmov	r0, s0
 800394e:	4629      	mov	r1, r5
 8003950:	f7fd f898 	bl	8000a84 <__aeabi_d2iz>
 8003954:	2800      	cmp	r0, #0
 8003956:	d051      	beq.n	80039fc <__kernel_sin+0xd4>
 8003958:	4622      	mov	r2, r4
 800395a:	462b      	mov	r3, r5
 800395c:	4620      	mov	r0, r4
 800395e:	4629      	mov	r1, r5
 8003960:	f7fc fdf6 	bl	8000550 <__aeabi_dmul>
 8003964:	4682      	mov	sl, r0
 8003966:	468b      	mov	fp, r1
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4620      	mov	r0, r4
 800396e:	4629      	mov	r1, r5
 8003970:	f7fc fdee 	bl	8000550 <__aeabi_dmul>
 8003974:	a341      	add	r3, pc, #260	; (adr r3, 8003a7c <__kernel_sin+0x154>)
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	4680      	mov	r8, r0
 800397c:	4689      	mov	r9, r1
 800397e:	4650      	mov	r0, sl
 8003980:	4659      	mov	r1, fp
 8003982:	f7fc fde5 	bl	8000550 <__aeabi_dmul>
 8003986:	a33f      	add	r3, pc, #252	; (adr r3, 8003a84 <__kernel_sin+0x15c>)
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f7fc fc28 	bl	80001e0 <__aeabi_dsub>
 8003990:	4652      	mov	r2, sl
 8003992:	465b      	mov	r3, fp
 8003994:	f7fc fddc 	bl	8000550 <__aeabi_dmul>
 8003998:	a33c      	add	r3, pc, #240	; (adr r3, 8003a8c <__kernel_sin+0x164>)
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	f7fc fc21 	bl	80001e4 <__adddf3>
 80039a2:	4652      	mov	r2, sl
 80039a4:	465b      	mov	r3, fp
 80039a6:	f7fc fdd3 	bl	8000550 <__aeabi_dmul>
 80039aa:	a33a      	add	r3, pc, #232	; (adr r3, 8003a94 <__kernel_sin+0x16c>)
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f7fc fc16 	bl	80001e0 <__aeabi_dsub>
 80039b4:	4652      	mov	r2, sl
 80039b6:	465b      	mov	r3, fp
 80039b8:	f7fc fdca 	bl	8000550 <__aeabi_dmul>
 80039bc:	a337      	add	r3, pc, #220	; (adr r3, 8003a9c <__kernel_sin+0x174>)
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	f7fc fc0f 	bl	80001e4 <__adddf3>
 80039c6:	9b01      	ldr	r3, [sp, #4]
 80039c8:	4606      	mov	r6, r0
 80039ca:	460f      	mov	r7, r1
 80039cc:	b9eb      	cbnz	r3, 8003a0a <__kernel_sin+0xe2>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4650      	mov	r0, sl
 80039d4:	4659      	mov	r1, fp
 80039d6:	f7fc fdbb 	bl	8000550 <__aeabi_dmul>
 80039da:	a325      	add	r3, pc, #148	; (adr r3, 8003a70 <__kernel_sin+0x148>)
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f7fc fbfe 	bl	80001e0 <__aeabi_dsub>
 80039e4:	4642      	mov	r2, r8
 80039e6:	464b      	mov	r3, r9
 80039e8:	f7fc fdb2 	bl	8000550 <__aeabi_dmul>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4620      	mov	r0, r4
 80039f2:	4629      	mov	r1, r5
 80039f4:	f7fc fbf6 	bl	80001e4 <__adddf3>
 80039f8:	4604      	mov	r4, r0
 80039fa:	460d      	mov	r5, r1
 80039fc:	ec45 4b10 	vmov	d0, r4, r5
 8003a00:	b003      	add	sp, #12
 8003a02:	ecbd 8b04 	vpop	{d8-d9}
 8003a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <__kernel_sin+0x150>)
 8003a0c:	ec51 0b18 	vmov	r0, r1, d8
 8003a10:	2200      	movs	r2, #0
 8003a12:	f7fc fd9d 	bl	8000550 <__aeabi_dmul>
 8003a16:	4632      	mov	r2, r6
 8003a18:	ec41 0b19 	vmov	d9, r0, r1
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	4640      	mov	r0, r8
 8003a20:	4649      	mov	r1, r9
 8003a22:	f7fc fd95 	bl	8000550 <__aeabi_dmul>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	ec51 0b19 	vmov	r0, r1, d9
 8003a2e:	f7fc fbd7 	bl	80001e0 <__aeabi_dsub>
 8003a32:	4652      	mov	r2, sl
 8003a34:	465b      	mov	r3, fp
 8003a36:	f7fc fd8b 	bl	8000550 <__aeabi_dmul>
 8003a3a:	ec53 2b18 	vmov	r2, r3, d8
 8003a3e:	f7fc fbcf 	bl	80001e0 <__aeabi_dsub>
 8003a42:	a30b      	add	r3, pc, #44	; (adr r3, 8003a70 <__kernel_sin+0x148>)
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	4606      	mov	r6, r0
 8003a4a:	460f      	mov	r7, r1
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	4649      	mov	r1, r9
 8003a50:	f7fc fd7e 	bl	8000550 <__aeabi_dmul>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4630      	mov	r0, r6
 8003a5a:	4639      	mov	r1, r7
 8003a5c:	f7fc fbc2 	bl	80001e4 <__adddf3>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4620      	mov	r0, r4
 8003a66:	4629      	mov	r1, r5
 8003a68:	f7fc fbba 	bl	80001e0 <__aeabi_dsub>
 8003a6c:	e7c4      	b.n	80039f8 <__kernel_sin+0xd0>
 8003a6e:	bf00      	nop
 8003a70:	55555549 	.word	0x55555549
 8003a74:	3fc55555 	.word	0x3fc55555
 8003a78:	3fe00000 	.word	0x3fe00000
 8003a7c:	5acfd57c 	.word	0x5acfd57c
 8003a80:	3de5d93a 	.word	0x3de5d93a
 8003a84:	8a2b9ceb 	.word	0x8a2b9ceb
 8003a88:	3e5ae5e6 	.word	0x3e5ae5e6
 8003a8c:	57b1fe7d 	.word	0x57b1fe7d
 8003a90:	3ec71de3 	.word	0x3ec71de3
 8003a94:	19c161d5 	.word	0x19c161d5
 8003a98:	3f2a01a0 	.word	0x3f2a01a0
 8003a9c:	1110f8a6 	.word	0x1110f8a6
 8003aa0:	3f811111 	.word	0x3f811111
 8003aa4:	00000000 	.word	0x00000000

08003aa8 <__ieee754_rem_pio2>:
 8003aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aac:	ed2d 8b02 	vpush	{d8}
 8003ab0:	ec55 4b10 	vmov	r4, r5, d0
 8003ab4:	4bca      	ldr	r3, [pc, #808]	; (8003de0 <__ieee754_rem_pio2+0x338>)
 8003ab6:	b08b      	sub	sp, #44	; 0x2c
 8003ab8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003abc:	4598      	cmp	r8, r3
 8003abe:	4682      	mov	sl, r0
 8003ac0:	9502      	str	r5, [sp, #8]
 8003ac2:	dc08      	bgt.n	8003ad6 <__ieee754_rem_pio2+0x2e>
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	ed80 0b00 	vstr	d0, [r0]
 8003acc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003ad0:	f04f 0b00 	mov.w	fp, #0
 8003ad4:	e028      	b.n	8003b28 <__ieee754_rem_pio2+0x80>
 8003ad6:	4bc3      	ldr	r3, [pc, #780]	; (8003de4 <__ieee754_rem_pio2+0x33c>)
 8003ad8:	4598      	cmp	r8, r3
 8003ada:	dc78      	bgt.n	8003bce <__ieee754_rem_pio2+0x126>
 8003adc:	9b02      	ldr	r3, [sp, #8]
 8003ade:	4ec2      	ldr	r6, [pc, #776]	; (8003de8 <__ieee754_rem_pio2+0x340>)
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	ee10 0a10 	vmov	r0, s0
 8003ae6:	a3b0      	add	r3, pc, #704	; (adr r3, 8003da8 <__ieee754_rem_pio2+0x300>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	4629      	mov	r1, r5
 8003aee:	dd39      	ble.n	8003b64 <__ieee754_rem_pio2+0xbc>
 8003af0:	f7fc fb76 	bl	80001e0 <__aeabi_dsub>
 8003af4:	45b0      	cmp	r8, r6
 8003af6:	4604      	mov	r4, r0
 8003af8:	460d      	mov	r5, r1
 8003afa:	d01b      	beq.n	8003b34 <__ieee754_rem_pio2+0x8c>
 8003afc:	a3ac      	add	r3, pc, #688	; (adr r3, 8003db0 <__ieee754_rem_pio2+0x308>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fc fb6d 	bl	80001e0 <__aeabi_dsub>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	e9ca 2300 	strd	r2, r3, [sl]
 8003b0e:	4620      	mov	r0, r4
 8003b10:	4629      	mov	r1, r5
 8003b12:	f7fc fb65 	bl	80001e0 <__aeabi_dsub>
 8003b16:	a3a6      	add	r3, pc, #664	; (adr r3, 8003db0 <__ieee754_rem_pio2+0x308>)
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f7fc fb60 	bl	80001e0 <__aeabi_dsub>
 8003b20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003b24:	f04f 0b01 	mov.w	fp, #1
 8003b28:	4658      	mov	r0, fp
 8003b2a:	b00b      	add	sp, #44	; 0x2c
 8003b2c:	ecbd 8b02 	vpop	{d8}
 8003b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b34:	a3a0      	add	r3, pc, #640	; (adr r3, 8003db8 <__ieee754_rem_pio2+0x310>)
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f7fc fb51 	bl	80001e0 <__aeabi_dsub>
 8003b3e:	a3a0      	add	r3, pc, #640	; (adr r3, 8003dc0 <__ieee754_rem_pio2+0x318>)
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	4604      	mov	r4, r0
 8003b46:	460d      	mov	r5, r1
 8003b48:	f7fc fb4a 	bl	80001e0 <__aeabi_dsub>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	e9ca 2300 	strd	r2, r3, [sl]
 8003b54:	4620      	mov	r0, r4
 8003b56:	4629      	mov	r1, r5
 8003b58:	f7fc fb42 	bl	80001e0 <__aeabi_dsub>
 8003b5c:	a398      	add	r3, pc, #608	; (adr r3, 8003dc0 <__ieee754_rem_pio2+0x318>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	e7db      	b.n	8003b1c <__ieee754_rem_pio2+0x74>
 8003b64:	f7fc fb3e 	bl	80001e4 <__adddf3>
 8003b68:	45b0      	cmp	r8, r6
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	460d      	mov	r5, r1
 8003b6e:	d016      	beq.n	8003b9e <__ieee754_rem_pio2+0xf6>
 8003b70:	a38f      	add	r3, pc, #572	; (adr r3, 8003db0 <__ieee754_rem_pio2+0x308>)
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	f7fc fb35 	bl	80001e4 <__adddf3>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	e9ca 2300 	strd	r2, r3, [sl]
 8003b82:	4620      	mov	r0, r4
 8003b84:	4629      	mov	r1, r5
 8003b86:	f7fc fb2b 	bl	80001e0 <__aeabi_dsub>
 8003b8a:	a389      	add	r3, pc, #548	; (adr r3, 8003db0 <__ieee754_rem_pio2+0x308>)
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	f7fc fb28 	bl	80001e4 <__adddf3>
 8003b94:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003b98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003b9c:	e7c4      	b.n	8003b28 <__ieee754_rem_pio2+0x80>
 8003b9e:	a386      	add	r3, pc, #536	; (adr r3, 8003db8 <__ieee754_rem_pio2+0x310>)
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f7fc fb1e 	bl	80001e4 <__adddf3>
 8003ba8:	a385      	add	r3, pc, #532	; (adr r3, 8003dc0 <__ieee754_rem_pio2+0x318>)
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	4604      	mov	r4, r0
 8003bb0:	460d      	mov	r5, r1
 8003bb2:	f7fc fb17 	bl	80001e4 <__adddf3>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	e9ca 2300 	strd	r2, r3, [sl]
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	f7fc fb0d 	bl	80001e0 <__aeabi_dsub>
 8003bc6:	a37e      	add	r3, pc, #504	; (adr r3, 8003dc0 <__ieee754_rem_pio2+0x318>)
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	e7e0      	b.n	8003b90 <__ieee754_rem_pio2+0xe8>
 8003bce:	4b87      	ldr	r3, [pc, #540]	; (8003dec <__ieee754_rem_pio2+0x344>)
 8003bd0:	4598      	cmp	r8, r3
 8003bd2:	f300 80d8 	bgt.w	8003d86 <__ieee754_rem_pio2+0x2de>
 8003bd6:	f000 f96d 	bl	8003eb4 <fabs>
 8003bda:	ec55 4b10 	vmov	r4, r5, d0
 8003bde:	ee10 0a10 	vmov	r0, s0
 8003be2:	a379      	add	r3, pc, #484	; (adr r3, 8003dc8 <__ieee754_rem_pio2+0x320>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	4629      	mov	r1, r5
 8003bea:	f7fc fcb1 	bl	8000550 <__aeabi_dmul>
 8003bee:	4b80      	ldr	r3, [pc, #512]	; (8003df0 <__ieee754_rem_pio2+0x348>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f7fc faf7 	bl	80001e4 <__adddf3>
 8003bf6:	f7fc ff45 	bl	8000a84 <__aeabi_d2iz>
 8003bfa:	4683      	mov	fp, r0
 8003bfc:	f7fc fc3e 	bl	800047c <__aeabi_i2d>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	ec43 2b18 	vmov	d8, r2, r3
 8003c08:	a367      	add	r3, pc, #412	; (adr r3, 8003da8 <__ieee754_rem_pio2+0x300>)
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f7fc fc9f 	bl	8000550 <__aeabi_dmul>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4620      	mov	r0, r4
 8003c18:	4629      	mov	r1, r5
 8003c1a:	f7fc fae1 	bl	80001e0 <__aeabi_dsub>
 8003c1e:	a364      	add	r3, pc, #400	; (adr r3, 8003db0 <__ieee754_rem_pio2+0x308>)
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	4606      	mov	r6, r0
 8003c26:	460f      	mov	r7, r1
 8003c28:	ec51 0b18 	vmov	r0, r1, d8
 8003c2c:	f7fc fc90 	bl	8000550 <__aeabi_dmul>
 8003c30:	f1bb 0f1f 	cmp.w	fp, #31
 8003c34:	4604      	mov	r4, r0
 8003c36:	460d      	mov	r5, r1
 8003c38:	dc0d      	bgt.n	8003c56 <__ieee754_rem_pio2+0x1ae>
 8003c3a:	4b6e      	ldr	r3, [pc, #440]	; (8003df4 <__ieee754_rem_pio2+0x34c>)
 8003c3c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8003c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c44:	4543      	cmp	r3, r8
 8003c46:	d006      	beq.n	8003c56 <__ieee754_rem_pio2+0x1ae>
 8003c48:	4622      	mov	r2, r4
 8003c4a:	462b      	mov	r3, r5
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	4639      	mov	r1, r7
 8003c50:	f7fc fac6 	bl	80001e0 <__aeabi_dsub>
 8003c54:	e00e      	b.n	8003c74 <__ieee754_rem_pio2+0x1cc>
 8003c56:	462b      	mov	r3, r5
 8003c58:	4622      	mov	r2, r4
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	f7fc fabf 	bl	80001e0 <__aeabi_dsub>
 8003c62:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003c66:	9303      	str	r3, [sp, #12]
 8003c68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003c6c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	dc02      	bgt.n	8003c7a <__ieee754_rem_pio2+0x1d2>
 8003c74:	e9ca 0100 	strd	r0, r1, [sl]
 8003c78:	e039      	b.n	8003cee <__ieee754_rem_pio2+0x246>
 8003c7a:	a34f      	add	r3, pc, #316	; (adr r3, 8003db8 <__ieee754_rem_pio2+0x310>)
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	ec51 0b18 	vmov	r0, r1, d8
 8003c84:	f7fc fc64 	bl	8000550 <__aeabi_dmul>
 8003c88:	4604      	mov	r4, r0
 8003c8a:	460d      	mov	r5, r1
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4630      	mov	r0, r6
 8003c92:	4639      	mov	r1, r7
 8003c94:	f7fc faa4 	bl	80001e0 <__aeabi_dsub>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4680      	mov	r8, r0
 8003c9e:	4689      	mov	r9, r1
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	4639      	mov	r1, r7
 8003ca4:	f7fc fa9c 	bl	80001e0 <__aeabi_dsub>
 8003ca8:	4622      	mov	r2, r4
 8003caa:	462b      	mov	r3, r5
 8003cac:	f7fc fa98 	bl	80001e0 <__aeabi_dsub>
 8003cb0:	a343      	add	r3, pc, #268	; (adr r3, 8003dc0 <__ieee754_rem_pio2+0x318>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	460d      	mov	r5, r1
 8003cba:	ec51 0b18 	vmov	r0, r1, d8
 8003cbe:	f7fc fc47 	bl	8000550 <__aeabi_dmul>
 8003cc2:	4622      	mov	r2, r4
 8003cc4:	462b      	mov	r3, r5
 8003cc6:	f7fc fa8b 	bl	80001e0 <__aeabi_dsub>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4604      	mov	r4, r0
 8003cd0:	460d      	mov	r5, r1
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	f7fc fa83 	bl	80001e0 <__aeabi_dsub>
 8003cda:	9a03      	ldr	r2, [sp, #12]
 8003cdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b31      	cmp	r3, #49	; 0x31
 8003ce4:	dc24      	bgt.n	8003d30 <__ieee754_rem_pio2+0x288>
 8003ce6:	e9ca 0100 	strd	r0, r1, [sl]
 8003cea:	4646      	mov	r6, r8
 8003cec:	464f      	mov	r7, r9
 8003cee:	e9da 8900 	ldrd	r8, r9, [sl]
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	4639      	mov	r1, r7
 8003cfa:	f7fc fa71 	bl	80001e0 <__aeabi_dsub>
 8003cfe:	462b      	mov	r3, r5
 8003d00:	4622      	mov	r2, r4
 8003d02:	f7fc fa6d 	bl	80001e0 <__aeabi_dsub>
 8003d06:	9b02      	ldr	r3, [sp, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003d0e:	f6bf af0b 	bge.w	8003b28 <__ieee754_rem_pio2+0x80>
 8003d12:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003d16:	f8ca 3004 	str.w	r3, [sl, #4]
 8003d1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d1e:	f8ca 8000 	str.w	r8, [sl]
 8003d22:	f8ca 0008 	str.w	r0, [sl, #8]
 8003d26:	f8ca 300c 	str.w	r3, [sl, #12]
 8003d2a:	f1cb 0b00 	rsb	fp, fp, #0
 8003d2e:	e6fb      	b.n	8003b28 <__ieee754_rem_pio2+0x80>
 8003d30:	a327      	add	r3, pc, #156	; (adr r3, 8003dd0 <__ieee754_rem_pio2+0x328>)
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	ec51 0b18 	vmov	r0, r1, d8
 8003d3a:	f7fc fc09 	bl	8000550 <__aeabi_dmul>
 8003d3e:	4604      	mov	r4, r0
 8003d40:	460d      	mov	r5, r1
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4640      	mov	r0, r8
 8003d48:	4649      	mov	r1, r9
 8003d4a:	f7fc fa49 	bl	80001e0 <__aeabi_dsub>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4606      	mov	r6, r0
 8003d54:	460f      	mov	r7, r1
 8003d56:	4640      	mov	r0, r8
 8003d58:	4649      	mov	r1, r9
 8003d5a:	f7fc fa41 	bl	80001e0 <__aeabi_dsub>
 8003d5e:	4622      	mov	r2, r4
 8003d60:	462b      	mov	r3, r5
 8003d62:	f7fc fa3d 	bl	80001e0 <__aeabi_dsub>
 8003d66:	a31c      	add	r3, pc, #112	; (adr r3, 8003dd8 <__ieee754_rem_pio2+0x330>)
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	460d      	mov	r5, r1
 8003d70:	ec51 0b18 	vmov	r0, r1, d8
 8003d74:	f7fc fbec 	bl	8000550 <__aeabi_dmul>
 8003d78:	4622      	mov	r2, r4
 8003d7a:	462b      	mov	r3, r5
 8003d7c:	f7fc fa30 	bl	80001e0 <__aeabi_dsub>
 8003d80:	4604      	mov	r4, r0
 8003d82:	460d      	mov	r5, r1
 8003d84:	e760      	b.n	8003c48 <__ieee754_rem_pio2+0x1a0>
 8003d86:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <__ieee754_rem_pio2+0x350>)
 8003d88:	4598      	cmp	r8, r3
 8003d8a:	dd37      	ble.n	8003dfc <__ieee754_rem_pio2+0x354>
 8003d8c:	ee10 2a10 	vmov	r2, s0
 8003d90:	462b      	mov	r3, r5
 8003d92:	4620      	mov	r0, r4
 8003d94:	4629      	mov	r1, r5
 8003d96:	f7fc fa23 	bl	80001e0 <__aeabi_dsub>
 8003d9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003d9e:	e9ca 0100 	strd	r0, r1, [sl]
 8003da2:	e695      	b.n	8003ad0 <__ieee754_rem_pio2+0x28>
 8003da4:	f3af 8000 	nop.w
 8003da8:	54400000 	.word	0x54400000
 8003dac:	3ff921fb 	.word	0x3ff921fb
 8003db0:	1a626331 	.word	0x1a626331
 8003db4:	3dd0b461 	.word	0x3dd0b461
 8003db8:	1a600000 	.word	0x1a600000
 8003dbc:	3dd0b461 	.word	0x3dd0b461
 8003dc0:	2e037073 	.word	0x2e037073
 8003dc4:	3ba3198a 	.word	0x3ba3198a
 8003dc8:	6dc9c883 	.word	0x6dc9c883
 8003dcc:	3fe45f30 	.word	0x3fe45f30
 8003dd0:	2e000000 	.word	0x2e000000
 8003dd4:	3ba3198a 	.word	0x3ba3198a
 8003dd8:	252049c1 	.word	0x252049c1
 8003ddc:	397b839a 	.word	0x397b839a
 8003de0:	3fe921fb 	.word	0x3fe921fb
 8003de4:	4002d97b 	.word	0x4002d97b
 8003de8:	3ff921fb 	.word	0x3ff921fb
 8003dec:	413921fb 	.word	0x413921fb
 8003df0:	3fe00000 	.word	0x3fe00000
 8003df4:	08004790 	.word	0x08004790
 8003df8:	7fefffff 	.word	0x7fefffff
 8003dfc:	ea4f 5628 	mov.w	r6, r8, asr #20
 8003e00:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8003e04:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8003e08:	4620      	mov	r0, r4
 8003e0a:	460d      	mov	r5, r1
 8003e0c:	f7fc fe3a 	bl	8000a84 <__aeabi_d2iz>
 8003e10:	f7fc fb34 	bl	800047c <__aeabi_i2d>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4620      	mov	r0, r4
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e20:	f7fc f9de 	bl	80001e0 <__aeabi_dsub>
 8003e24:	4b21      	ldr	r3, [pc, #132]	; (8003eac <__ieee754_rem_pio2+0x404>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	f7fc fb92 	bl	8000550 <__aeabi_dmul>
 8003e2c:	460d      	mov	r5, r1
 8003e2e:	4604      	mov	r4, r0
 8003e30:	f7fc fe28 	bl	8000a84 <__aeabi_d2iz>
 8003e34:	f7fc fb22 	bl	800047c <__aeabi_i2d>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	4629      	mov	r1, r5
 8003e40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e44:	f7fc f9cc 	bl	80001e0 <__aeabi_dsub>
 8003e48:	4b18      	ldr	r3, [pc, #96]	; (8003eac <__ieee754_rem_pio2+0x404>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f7fc fb80 	bl	8000550 <__aeabi_dmul>
 8003e50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003e54:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8003e58:	2703      	movs	r7, #3
 8003e5a:	2400      	movs	r4, #0
 8003e5c:	2500      	movs	r5, #0
 8003e5e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8003e62:	4622      	mov	r2, r4
 8003e64:	462b      	mov	r3, r5
 8003e66:	46b9      	mov	r9, r7
 8003e68:	3f01      	subs	r7, #1
 8003e6a:	f7fc fdd9 	bl	8000a20 <__aeabi_dcmpeq>
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d1f5      	bne.n	8003e5e <__ieee754_rem_pio2+0x3b6>
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <__ieee754_rem_pio2+0x408>)
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	2302      	movs	r3, #2
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	4632      	mov	r2, r6
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	4651      	mov	r1, sl
 8003e80:	a804      	add	r0, sp, #16
 8003e82:	f000 f821 	bl	8003ec8 <__kernel_rem_pio2>
 8003e86:	9b02      	ldr	r3, [sp, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	4683      	mov	fp, r0
 8003e8c:	f6bf ae4c 	bge.w	8003b28 <__ieee754_rem_pio2+0x80>
 8003e90:	e9da 2100 	ldrd	r2, r1, [sl]
 8003e94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e98:	e9ca 2300 	strd	r2, r3, [sl]
 8003e9c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003ea0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ea4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8003ea8:	e73f      	b.n	8003d2a <__ieee754_rem_pio2+0x282>
 8003eaa:	bf00      	nop
 8003eac:	41700000 	.word	0x41700000
 8003eb0:	08004810 	.word	0x08004810

08003eb4 <fabs>:
 8003eb4:	ec51 0b10 	vmov	r0, r1, d0
 8003eb8:	ee10 2a10 	vmov	r2, s0
 8003ebc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003ec0:	ec43 2b10 	vmov	d0, r2, r3
 8003ec4:	4770      	bx	lr
	...

08003ec8 <__kernel_rem_pio2>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	ed2d 8b02 	vpush	{d8}
 8003ed0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003ed4:	f112 0f14 	cmn.w	r2, #20
 8003ed8:	9306      	str	r3, [sp, #24]
 8003eda:	9104      	str	r1, [sp, #16]
 8003edc:	4bc2      	ldr	r3, [pc, #776]	; (80041e8 <__kernel_rem_pio2+0x320>)
 8003ede:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003ee0:	9009      	str	r0, [sp, #36]	; 0x24
 8003ee2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	9b06      	ldr	r3, [sp, #24]
 8003eea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003eee:	bfa8      	it	ge
 8003ef0:	1ed4      	subge	r4, r2, #3
 8003ef2:	9305      	str	r3, [sp, #20]
 8003ef4:	bfb2      	itee	lt
 8003ef6:	2400      	movlt	r4, #0
 8003ef8:	2318      	movge	r3, #24
 8003efa:	fb94 f4f3 	sdivge	r4, r4, r3
 8003efe:	f06f 0317 	mvn.w	r3, #23
 8003f02:	fb04 3303 	mla	r3, r4, r3, r3
 8003f06:	eb03 0a02 	add.w	sl, r3, r2
 8003f0a:	9b00      	ldr	r3, [sp, #0]
 8003f0c:	9a05      	ldr	r2, [sp, #20]
 8003f0e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80041d8 <__kernel_rem_pio2+0x310>
 8003f12:	eb03 0802 	add.w	r8, r3, r2
 8003f16:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003f18:	1aa7      	subs	r7, r4, r2
 8003f1a:	ae20      	add	r6, sp, #128	; 0x80
 8003f1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003f20:	2500      	movs	r5, #0
 8003f22:	4545      	cmp	r5, r8
 8003f24:	dd13      	ble.n	8003f4e <__kernel_rem_pio2+0x86>
 8003f26:	9b06      	ldr	r3, [sp, #24]
 8003f28:	aa20      	add	r2, sp, #128	; 0x80
 8003f2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003f2e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003f32:	f04f 0800 	mov.w	r8, #0
 8003f36:	9b00      	ldr	r3, [sp, #0]
 8003f38:	4598      	cmp	r8, r3
 8003f3a:	dc31      	bgt.n	8003fa0 <__kernel_rem_pio2+0xd8>
 8003f3c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80041d8 <__kernel_rem_pio2+0x310>
 8003f40:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003f44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003f48:	462f      	mov	r7, r5
 8003f4a:	2600      	movs	r6, #0
 8003f4c:	e01b      	b.n	8003f86 <__kernel_rem_pio2+0xbe>
 8003f4e:	42ef      	cmn	r7, r5
 8003f50:	d407      	bmi.n	8003f62 <__kernel_rem_pio2+0x9a>
 8003f52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003f56:	f7fc fa91 	bl	800047c <__aeabi_i2d>
 8003f5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003f5e:	3501      	adds	r5, #1
 8003f60:	e7df      	b.n	8003f22 <__kernel_rem_pio2+0x5a>
 8003f62:	ec51 0b18 	vmov	r0, r1, d8
 8003f66:	e7f8      	b.n	8003f5a <__kernel_rem_pio2+0x92>
 8003f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003f70:	f7fc faee 	bl	8000550 <__aeabi_dmul>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f7c:	f7fc f932 	bl	80001e4 <__adddf3>
 8003f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f84:	3601      	adds	r6, #1
 8003f86:	9b05      	ldr	r3, [sp, #20]
 8003f88:	429e      	cmp	r6, r3
 8003f8a:	f1a7 0708 	sub.w	r7, r7, #8
 8003f8e:	ddeb      	ble.n	8003f68 <__kernel_rem_pio2+0xa0>
 8003f90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f94:	f108 0801 	add.w	r8, r8, #1
 8003f98:	ecab 7b02 	vstmia	fp!, {d7}
 8003f9c:	3508      	adds	r5, #8
 8003f9e:	e7ca      	b.n	8003f36 <__kernel_rem_pio2+0x6e>
 8003fa0:	9b00      	ldr	r3, [sp, #0]
 8003fa2:	aa0c      	add	r2, sp, #48	; 0x30
 8003fa4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003faa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003fac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003fb0:	9c00      	ldr	r4, [sp, #0]
 8003fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8003fb4:	00e3      	lsls	r3, r4, #3
 8003fb6:	9308      	str	r3, [sp, #32]
 8003fb8:	ab98      	add	r3, sp, #608	; 0x260
 8003fba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003fbe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003fc2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8003fc6:	ab70      	add	r3, sp, #448	; 0x1c0
 8003fc8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003fcc:	46c3      	mov	fp, r8
 8003fce:	46a1      	mov	r9, r4
 8003fd0:	f1b9 0f00 	cmp.w	r9, #0
 8003fd4:	f1a5 0508 	sub.w	r5, r5, #8
 8003fd8:	dc77      	bgt.n	80040ca <__kernel_rem_pio2+0x202>
 8003fda:	ec47 6b10 	vmov	d0, r6, r7
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f000 fac2 	bl	8004568 <scalbn>
 8003fe4:	ec57 6b10 	vmov	r6, r7, d0
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003fee:	ee10 0a10 	vmov	r0, s0
 8003ff2:	4639      	mov	r1, r7
 8003ff4:	f7fc faac 	bl	8000550 <__aeabi_dmul>
 8003ff8:	ec41 0b10 	vmov	d0, r0, r1
 8003ffc:	f000 fb34 	bl	8004668 <floor>
 8004000:	4b7a      	ldr	r3, [pc, #488]	; (80041ec <__kernel_rem_pio2+0x324>)
 8004002:	ec51 0b10 	vmov	r0, r1, d0
 8004006:	2200      	movs	r2, #0
 8004008:	f7fc faa2 	bl	8000550 <__aeabi_dmul>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4630      	mov	r0, r6
 8004012:	4639      	mov	r1, r7
 8004014:	f7fc f8e4 	bl	80001e0 <__aeabi_dsub>
 8004018:	460f      	mov	r7, r1
 800401a:	4606      	mov	r6, r0
 800401c:	f7fc fd32 	bl	8000a84 <__aeabi_d2iz>
 8004020:	9002      	str	r0, [sp, #8]
 8004022:	f7fc fa2b 	bl	800047c <__aeabi_i2d>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4630      	mov	r0, r6
 800402c:	4639      	mov	r1, r7
 800402e:	f7fc f8d7 	bl	80001e0 <__aeabi_dsub>
 8004032:	f1ba 0f00 	cmp.w	sl, #0
 8004036:	4606      	mov	r6, r0
 8004038:	460f      	mov	r7, r1
 800403a:	dd6d      	ble.n	8004118 <__kernel_rem_pio2+0x250>
 800403c:	1e61      	subs	r1, r4, #1
 800403e:	ab0c      	add	r3, sp, #48	; 0x30
 8004040:	9d02      	ldr	r5, [sp, #8]
 8004042:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004046:	f1ca 0018 	rsb	r0, sl, #24
 800404a:	fa43 f200 	asr.w	r2, r3, r0
 800404e:	4415      	add	r5, r2
 8004050:	4082      	lsls	r2, r0
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	aa0c      	add	r2, sp, #48	; 0x30
 8004056:	9502      	str	r5, [sp, #8]
 8004058:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800405c:	f1ca 0217 	rsb	r2, sl, #23
 8004060:	fa43 fb02 	asr.w	fp, r3, r2
 8004064:	f1bb 0f00 	cmp.w	fp, #0
 8004068:	dd65      	ble.n	8004136 <__kernel_rem_pio2+0x26e>
 800406a:	9b02      	ldr	r3, [sp, #8]
 800406c:	2200      	movs	r2, #0
 800406e:	3301      	adds	r3, #1
 8004070:	9302      	str	r3, [sp, #8]
 8004072:	4615      	mov	r5, r2
 8004074:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004078:	4294      	cmp	r4, r2
 800407a:	f300 809f 	bgt.w	80041bc <__kernel_rem_pio2+0x2f4>
 800407e:	f1ba 0f00 	cmp.w	sl, #0
 8004082:	dd07      	ble.n	8004094 <__kernel_rem_pio2+0x1cc>
 8004084:	f1ba 0f01 	cmp.w	sl, #1
 8004088:	f000 80c1 	beq.w	800420e <__kernel_rem_pio2+0x346>
 800408c:	f1ba 0f02 	cmp.w	sl, #2
 8004090:	f000 80c7 	beq.w	8004222 <__kernel_rem_pio2+0x35a>
 8004094:	f1bb 0f02 	cmp.w	fp, #2
 8004098:	d14d      	bne.n	8004136 <__kernel_rem_pio2+0x26e>
 800409a:	4632      	mov	r2, r6
 800409c:	463b      	mov	r3, r7
 800409e:	4954      	ldr	r1, [pc, #336]	; (80041f0 <__kernel_rem_pio2+0x328>)
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7fc f89d 	bl	80001e0 <__aeabi_dsub>
 80040a6:	4606      	mov	r6, r0
 80040a8:	460f      	mov	r7, r1
 80040aa:	2d00      	cmp	r5, #0
 80040ac:	d043      	beq.n	8004136 <__kernel_rem_pio2+0x26e>
 80040ae:	4650      	mov	r0, sl
 80040b0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80041e0 <__kernel_rem_pio2+0x318>
 80040b4:	f000 fa58 	bl	8004568 <scalbn>
 80040b8:	4630      	mov	r0, r6
 80040ba:	4639      	mov	r1, r7
 80040bc:	ec53 2b10 	vmov	r2, r3, d0
 80040c0:	f7fc f88e 	bl	80001e0 <__aeabi_dsub>
 80040c4:	4606      	mov	r6, r0
 80040c6:	460f      	mov	r7, r1
 80040c8:	e035      	b.n	8004136 <__kernel_rem_pio2+0x26e>
 80040ca:	4b4a      	ldr	r3, [pc, #296]	; (80041f4 <__kernel_rem_pio2+0x32c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	4630      	mov	r0, r6
 80040d0:	4639      	mov	r1, r7
 80040d2:	f7fc fa3d 	bl	8000550 <__aeabi_dmul>
 80040d6:	f7fc fcd5 	bl	8000a84 <__aeabi_d2iz>
 80040da:	f7fc f9cf 	bl	800047c <__aeabi_i2d>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	ec43 2b18 	vmov	d8, r2, r3
 80040e6:	4b44      	ldr	r3, [pc, #272]	; (80041f8 <__kernel_rem_pio2+0x330>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	f7fc fa31 	bl	8000550 <__aeabi_dmul>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4630      	mov	r0, r6
 80040f4:	4639      	mov	r1, r7
 80040f6:	f7fc f873 	bl	80001e0 <__aeabi_dsub>
 80040fa:	f7fc fcc3 	bl	8000a84 <__aeabi_d2iz>
 80040fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004102:	f84b 0b04 	str.w	r0, [fp], #4
 8004106:	ec51 0b18 	vmov	r0, r1, d8
 800410a:	f7fc f86b 	bl	80001e4 <__adddf3>
 800410e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004112:	4606      	mov	r6, r0
 8004114:	460f      	mov	r7, r1
 8004116:	e75b      	b.n	8003fd0 <__kernel_rem_pio2+0x108>
 8004118:	d106      	bne.n	8004128 <__kernel_rem_pio2+0x260>
 800411a:	1e63      	subs	r3, r4, #1
 800411c:	aa0c      	add	r2, sp, #48	; 0x30
 800411e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004122:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8004126:	e79d      	b.n	8004064 <__kernel_rem_pio2+0x19c>
 8004128:	4b34      	ldr	r3, [pc, #208]	; (80041fc <__kernel_rem_pio2+0x334>)
 800412a:	2200      	movs	r2, #0
 800412c:	f7fc fc96 	bl	8000a5c <__aeabi_dcmpge>
 8004130:	2800      	cmp	r0, #0
 8004132:	d140      	bne.n	80041b6 <__kernel_rem_pio2+0x2ee>
 8004134:	4683      	mov	fp, r0
 8004136:	2200      	movs	r2, #0
 8004138:	2300      	movs	r3, #0
 800413a:	4630      	mov	r0, r6
 800413c:	4639      	mov	r1, r7
 800413e:	f7fc fc6f 	bl	8000a20 <__aeabi_dcmpeq>
 8004142:	2800      	cmp	r0, #0
 8004144:	f000 80c1 	beq.w	80042ca <__kernel_rem_pio2+0x402>
 8004148:	1e65      	subs	r5, r4, #1
 800414a:	462b      	mov	r3, r5
 800414c:	2200      	movs	r2, #0
 800414e:	9900      	ldr	r1, [sp, #0]
 8004150:	428b      	cmp	r3, r1
 8004152:	da6d      	bge.n	8004230 <__kernel_rem_pio2+0x368>
 8004154:	2a00      	cmp	r2, #0
 8004156:	f000 808a 	beq.w	800426e <__kernel_rem_pio2+0x3a6>
 800415a:	ab0c      	add	r3, sp, #48	; 0x30
 800415c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004160:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80ae 	beq.w	80042c6 <__kernel_rem_pio2+0x3fe>
 800416a:	4650      	mov	r0, sl
 800416c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80041e0 <__kernel_rem_pio2+0x318>
 8004170:	f000 f9fa 	bl	8004568 <scalbn>
 8004174:	1c6b      	adds	r3, r5, #1
 8004176:	00da      	lsls	r2, r3, #3
 8004178:	9205      	str	r2, [sp, #20]
 800417a:	ec57 6b10 	vmov	r6, r7, d0
 800417e:	aa70      	add	r2, sp, #448	; 0x1c0
 8004180:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80041f4 <__kernel_rem_pio2+0x32c>
 8004184:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8004188:	462c      	mov	r4, r5
 800418a:	f04f 0800 	mov.w	r8, #0
 800418e:	2c00      	cmp	r4, #0
 8004190:	f280 80d4 	bge.w	800433c <__kernel_rem_pio2+0x474>
 8004194:	462c      	mov	r4, r5
 8004196:	2c00      	cmp	r4, #0
 8004198:	f2c0 8102 	blt.w	80043a0 <__kernel_rem_pio2+0x4d8>
 800419c:	4b18      	ldr	r3, [pc, #96]	; (8004200 <__kernel_rem_pio2+0x338>)
 800419e:	461e      	mov	r6, r3
 80041a0:	ab70      	add	r3, sp, #448	; 0x1c0
 80041a2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80041a6:	1b2b      	subs	r3, r5, r4
 80041a8:	f04f 0900 	mov.w	r9, #0
 80041ac:	f04f 0a00 	mov.w	sl, #0
 80041b0:	2700      	movs	r7, #0
 80041b2:	9306      	str	r3, [sp, #24]
 80041b4:	e0e6      	b.n	8004384 <__kernel_rem_pio2+0x4bc>
 80041b6:	f04f 0b02 	mov.w	fp, #2
 80041ba:	e756      	b.n	800406a <__kernel_rem_pio2+0x1a2>
 80041bc:	f8d8 3000 	ldr.w	r3, [r8]
 80041c0:	bb05      	cbnz	r5, 8004204 <__kernel_rem_pio2+0x33c>
 80041c2:	b123      	cbz	r3, 80041ce <__kernel_rem_pio2+0x306>
 80041c4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80041c8:	f8c8 3000 	str.w	r3, [r8]
 80041cc:	2301      	movs	r3, #1
 80041ce:	3201      	adds	r2, #1
 80041d0:	f108 0804 	add.w	r8, r8, #4
 80041d4:	461d      	mov	r5, r3
 80041d6:	e74f      	b.n	8004078 <__kernel_rem_pio2+0x1b0>
	...
 80041e4:	3ff00000 	.word	0x3ff00000
 80041e8:	08004958 	.word	0x08004958
 80041ec:	40200000 	.word	0x40200000
 80041f0:	3ff00000 	.word	0x3ff00000
 80041f4:	3e700000 	.word	0x3e700000
 80041f8:	41700000 	.word	0x41700000
 80041fc:	3fe00000 	.word	0x3fe00000
 8004200:	08004918 	.word	0x08004918
 8004204:	1acb      	subs	r3, r1, r3
 8004206:	f8c8 3000 	str.w	r3, [r8]
 800420a:	462b      	mov	r3, r5
 800420c:	e7df      	b.n	80041ce <__kernel_rem_pio2+0x306>
 800420e:	1e62      	subs	r2, r4, #1
 8004210:	ab0c      	add	r3, sp, #48	; 0x30
 8004212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004216:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800421a:	a90c      	add	r1, sp, #48	; 0x30
 800421c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004220:	e738      	b.n	8004094 <__kernel_rem_pio2+0x1cc>
 8004222:	1e62      	subs	r2, r4, #1
 8004224:	ab0c      	add	r3, sp, #48	; 0x30
 8004226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800422a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800422e:	e7f4      	b.n	800421a <__kernel_rem_pio2+0x352>
 8004230:	a90c      	add	r1, sp, #48	; 0x30
 8004232:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004236:	3b01      	subs	r3, #1
 8004238:	430a      	orrs	r2, r1
 800423a:	e788      	b.n	800414e <__kernel_rem_pio2+0x286>
 800423c:	3301      	adds	r3, #1
 800423e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004242:	2900      	cmp	r1, #0
 8004244:	d0fa      	beq.n	800423c <__kernel_rem_pio2+0x374>
 8004246:	9a08      	ldr	r2, [sp, #32]
 8004248:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800424c:	446a      	add	r2, sp
 800424e:	3a98      	subs	r2, #152	; 0x98
 8004250:	9208      	str	r2, [sp, #32]
 8004252:	9a06      	ldr	r2, [sp, #24]
 8004254:	a920      	add	r1, sp, #128	; 0x80
 8004256:	18a2      	adds	r2, r4, r2
 8004258:	18e3      	adds	r3, r4, r3
 800425a:	f104 0801 	add.w	r8, r4, #1
 800425e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8004262:	9302      	str	r3, [sp, #8]
 8004264:	9b02      	ldr	r3, [sp, #8]
 8004266:	4543      	cmp	r3, r8
 8004268:	da04      	bge.n	8004274 <__kernel_rem_pio2+0x3ac>
 800426a:	461c      	mov	r4, r3
 800426c:	e6a2      	b.n	8003fb4 <__kernel_rem_pio2+0xec>
 800426e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004270:	2301      	movs	r3, #1
 8004272:	e7e4      	b.n	800423e <__kernel_rem_pio2+0x376>
 8004274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004276:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800427a:	f7fc f8ff 	bl	800047c <__aeabi_i2d>
 800427e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004284:	46ab      	mov	fp, r5
 8004286:	461c      	mov	r4, r3
 8004288:	f04f 0900 	mov.w	r9, #0
 800428c:	2600      	movs	r6, #0
 800428e:	2700      	movs	r7, #0
 8004290:	9b05      	ldr	r3, [sp, #20]
 8004292:	4599      	cmp	r9, r3
 8004294:	dd06      	ble.n	80042a4 <__kernel_rem_pio2+0x3dc>
 8004296:	9b08      	ldr	r3, [sp, #32]
 8004298:	e8e3 6702 	strd	r6, r7, [r3], #8
 800429c:	f108 0801 	add.w	r8, r8, #1
 80042a0:	9308      	str	r3, [sp, #32]
 80042a2:	e7df      	b.n	8004264 <__kernel_rem_pio2+0x39c>
 80042a4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80042a8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80042ac:	f7fc f950 	bl	8000550 <__aeabi_dmul>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4630      	mov	r0, r6
 80042b6:	4639      	mov	r1, r7
 80042b8:	f7fb ff94 	bl	80001e4 <__adddf3>
 80042bc:	f109 0901 	add.w	r9, r9, #1
 80042c0:	4606      	mov	r6, r0
 80042c2:	460f      	mov	r7, r1
 80042c4:	e7e4      	b.n	8004290 <__kernel_rem_pio2+0x3c8>
 80042c6:	3d01      	subs	r5, #1
 80042c8:	e747      	b.n	800415a <__kernel_rem_pio2+0x292>
 80042ca:	ec47 6b10 	vmov	d0, r6, r7
 80042ce:	f1ca 0000 	rsb	r0, sl, #0
 80042d2:	f000 f949 	bl	8004568 <scalbn>
 80042d6:	ec57 6b10 	vmov	r6, r7, d0
 80042da:	4ba0      	ldr	r3, [pc, #640]	; (800455c <__kernel_rem_pio2+0x694>)
 80042dc:	ee10 0a10 	vmov	r0, s0
 80042e0:	2200      	movs	r2, #0
 80042e2:	4639      	mov	r1, r7
 80042e4:	f7fc fbba 	bl	8000a5c <__aeabi_dcmpge>
 80042e8:	b1f8      	cbz	r0, 800432a <__kernel_rem_pio2+0x462>
 80042ea:	4b9d      	ldr	r3, [pc, #628]	; (8004560 <__kernel_rem_pio2+0x698>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	4630      	mov	r0, r6
 80042f0:	4639      	mov	r1, r7
 80042f2:	f7fc f92d 	bl	8000550 <__aeabi_dmul>
 80042f6:	f7fc fbc5 	bl	8000a84 <__aeabi_d2iz>
 80042fa:	4680      	mov	r8, r0
 80042fc:	f7fc f8be 	bl	800047c <__aeabi_i2d>
 8004300:	4b96      	ldr	r3, [pc, #600]	; (800455c <__kernel_rem_pio2+0x694>)
 8004302:	2200      	movs	r2, #0
 8004304:	f7fc f924 	bl	8000550 <__aeabi_dmul>
 8004308:	460b      	mov	r3, r1
 800430a:	4602      	mov	r2, r0
 800430c:	4639      	mov	r1, r7
 800430e:	4630      	mov	r0, r6
 8004310:	f7fb ff66 	bl	80001e0 <__aeabi_dsub>
 8004314:	f7fc fbb6 	bl	8000a84 <__aeabi_d2iz>
 8004318:	1c65      	adds	r5, r4, #1
 800431a:	ab0c      	add	r3, sp, #48	; 0x30
 800431c:	f10a 0a18 	add.w	sl, sl, #24
 8004320:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004324:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004328:	e71f      	b.n	800416a <__kernel_rem_pio2+0x2a2>
 800432a:	4630      	mov	r0, r6
 800432c:	4639      	mov	r1, r7
 800432e:	f7fc fba9 	bl	8000a84 <__aeabi_d2iz>
 8004332:	ab0c      	add	r3, sp, #48	; 0x30
 8004334:	4625      	mov	r5, r4
 8004336:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800433a:	e716      	b.n	800416a <__kernel_rem_pio2+0x2a2>
 800433c:	ab0c      	add	r3, sp, #48	; 0x30
 800433e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004342:	f7fc f89b 	bl	800047c <__aeabi_i2d>
 8004346:	4632      	mov	r2, r6
 8004348:	463b      	mov	r3, r7
 800434a:	f7fc f901 	bl	8000550 <__aeabi_dmul>
 800434e:	4642      	mov	r2, r8
 8004350:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004354:	464b      	mov	r3, r9
 8004356:	4630      	mov	r0, r6
 8004358:	4639      	mov	r1, r7
 800435a:	f7fc f8f9 	bl	8000550 <__aeabi_dmul>
 800435e:	3c01      	subs	r4, #1
 8004360:	4606      	mov	r6, r0
 8004362:	460f      	mov	r7, r1
 8004364:	e713      	b.n	800418e <__kernel_rem_pio2+0x2c6>
 8004366:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800436a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800436e:	f7fc f8ef 	bl	8000550 <__aeabi_dmul>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4648      	mov	r0, r9
 8004378:	4651      	mov	r1, sl
 800437a:	f7fb ff33 	bl	80001e4 <__adddf3>
 800437e:	3701      	adds	r7, #1
 8004380:	4681      	mov	r9, r0
 8004382:	468a      	mov	sl, r1
 8004384:	9b00      	ldr	r3, [sp, #0]
 8004386:	429f      	cmp	r7, r3
 8004388:	dc02      	bgt.n	8004390 <__kernel_rem_pio2+0x4c8>
 800438a:	9b06      	ldr	r3, [sp, #24]
 800438c:	429f      	cmp	r7, r3
 800438e:	ddea      	ble.n	8004366 <__kernel_rem_pio2+0x49e>
 8004390:	9a06      	ldr	r2, [sp, #24]
 8004392:	ab48      	add	r3, sp, #288	; 0x120
 8004394:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004398:	e9c6 9a00 	strd	r9, sl, [r6]
 800439c:	3c01      	subs	r4, #1
 800439e:	e6fa      	b.n	8004196 <__kernel_rem_pio2+0x2ce>
 80043a0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	dc0b      	bgt.n	80043be <__kernel_rem_pio2+0x4f6>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	dc39      	bgt.n	800441e <__kernel_rem_pio2+0x556>
 80043aa:	d05d      	beq.n	8004468 <__kernel_rem_pio2+0x5a0>
 80043ac:	9b02      	ldr	r3, [sp, #8]
 80043ae:	f003 0007 	and.w	r0, r3, #7
 80043b2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80043b6:	ecbd 8b02 	vpop	{d8}
 80043ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043be:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d1f3      	bne.n	80043ac <__kernel_rem_pio2+0x4e4>
 80043c4:	9b05      	ldr	r3, [sp, #20]
 80043c6:	9500      	str	r5, [sp, #0]
 80043c8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80043cc:	eb0d 0403 	add.w	r4, sp, r3
 80043d0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80043d4:	46a2      	mov	sl, r4
 80043d6:	9b00      	ldr	r3, [sp, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f1aa 0a08 	sub.w	sl, sl, #8
 80043de:	dc69      	bgt.n	80044b4 <__kernel_rem_pio2+0x5ec>
 80043e0:	46aa      	mov	sl, r5
 80043e2:	f1ba 0f01 	cmp.w	sl, #1
 80043e6:	f1a4 0408 	sub.w	r4, r4, #8
 80043ea:	f300 8083 	bgt.w	80044f4 <__kernel_rem_pio2+0x62c>
 80043ee:	9c05      	ldr	r4, [sp, #20]
 80043f0:	ab48      	add	r3, sp, #288	; 0x120
 80043f2:	441c      	add	r4, r3
 80043f4:	2000      	movs	r0, #0
 80043f6:	2100      	movs	r1, #0
 80043f8:	2d01      	cmp	r5, #1
 80043fa:	f300 809a 	bgt.w	8004532 <__kernel_rem_pio2+0x66a>
 80043fe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8004402:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004406:	f1bb 0f00 	cmp.w	fp, #0
 800440a:	f040 8098 	bne.w	800453e <__kernel_rem_pio2+0x676>
 800440e:	9b04      	ldr	r3, [sp, #16]
 8004410:	e9c3 7800 	strd	r7, r8, [r3]
 8004414:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004418:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800441c:	e7c6      	b.n	80043ac <__kernel_rem_pio2+0x4e4>
 800441e:	9e05      	ldr	r6, [sp, #20]
 8004420:	ab48      	add	r3, sp, #288	; 0x120
 8004422:	441e      	add	r6, r3
 8004424:	462c      	mov	r4, r5
 8004426:	2000      	movs	r0, #0
 8004428:	2100      	movs	r1, #0
 800442a:	2c00      	cmp	r4, #0
 800442c:	da33      	bge.n	8004496 <__kernel_rem_pio2+0x5ce>
 800442e:	f1bb 0f00 	cmp.w	fp, #0
 8004432:	d036      	beq.n	80044a2 <__kernel_rem_pio2+0x5da>
 8004434:	4602      	mov	r2, r0
 8004436:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800443a:	9c04      	ldr	r4, [sp, #16]
 800443c:	e9c4 2300 	strd	r2, r3, [r4]
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004448:	f7fb feca 	bl	80001e0 <__aeabi_dsub>
 800444c:	ae4a      	add	r6, sp, #296	; 0x128
 800444e:	2401      	movs	r4, #1
 8004450:	42a5      	cmp	r5, r4
 8004452:	da29      	bge.n	80044a8 <__kernel_rem_pio2+0x5e0>
 8004454:	f1bb 0f00 	cmp.w	fp, #0
 8004458:	d002      	beq.n	8004460 <__kernel_rem_pio2+0x598>
 800445a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800445e:	4619      	mov	r1, r3
 8004460:	9b04      	ldr	r3, [sp, #16]
 8004462:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004466:	e7a1      	b.n	80043ac <__kernel_rem_pio2+0x4e4>
 8004468:	9c05      	ldr	r4, [sp, #20]
 800446a:	ab48      	add	r3, sp, #288	; 0x120
 800446c:	441c      	add	r4, r3
 800446e:	2000      	movs	r0, #0
 8004470:	2100      	movs	r1, #0
 8004472:	2d00      	cmp	r5, #0
 8004474:	da09      	bge.n	800448a <__kernel_rem_pio2+0x5c2>
 8004476:	f1bb 0f00 	cmp.w	fp, #0
 800447a:	d002      	beq.n	8004482 <__kernel_rem_pio2+0x5ba>
 800447c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004480:	4619      	mov	r1, r3
 8004482:	9b04      	ldr	r3, [sp, #16]
 8004484:	e9c3 0100 	strd	r0, r1, [r3]
 8004488:	e790      	b.n	80043ac <__kernel_rem_pio2+0x4e4>
 800448a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800448e:	f7fb fea9 	bl	80001e4 <__adddf3>
 8004492:	3d01      	subs	r5, #1
 8004494:	e7ed      	b.n	8004472 <__kernel_rem_pio2+0x5aa>
 8004496:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800449a:	f7fb fea3 	bl	80001e4 <__adddf3>
 800449e:	3c01      	subs	r4, #1
 80044a0:	e7c3      	b.n	800442a <__kernel_rem_pio2+0x562>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	e7c8      	b.n	800443a <__kernel_rem_pio2+0x572>
 80044a8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80044ac:	f7fb fe9a 	bl	80001e4 <__adddf3>
 80044b0:	3401      	adds	r4, #1
 80044b2:	e7cd      	b.n	8004450 <__kernel_rem_pio2+0x588>
 80044b4:	e9da 8900 	ldrd	r8, r9, [sl]
 80044b8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80044bc:	9b00      	ldr	r3, [sp, #0]
 80044be:	3b01      	subs	r3, #1
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	4632      	mov	r2, r6
 80044c4:	463b      	mov	r3, r7
 80044c6:	4640      	mov	r0, r8
 80044c8:	4649      	mov	r1, r9
 80044ca:	f7fb fe8b 	bl	80001e4 <__adddf3>
 80044ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4640      	mov	r0, r8
 80044d8:	4649      	mov	r1, r9
 80044da:	f7fb fe81 	bl	80001e0 <__aeabi_dsub>
 80044de:	4632      	mov	r2, r6
 80044e0:	463b      	mov	r3, r7
 80044e2:	f7fb fe7f 	bl	80001e4 <__adddf3>
 80044e6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80044ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80044ee:	ed8a 7b00 	vstr	d7, [sl]
 80044f2:	e770      	b.n	80043d6 <__kernel_rem_pio2+0x50e>
 80044f4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80044f8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80044fc:	4640      	mov	r0, r8
 80044fe:	4632      	mov	r2, r6
 8004500:	463b      	mov	r3, r7
 8004502:	4649      	mov	r1, r9
 8004504:	f7fb fe6e 	bl	80001e4 <__adddf3>
 8004508:	e9cd 0100 	strd	r0, r1, [sp]
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4640      	mov	r0, r8
 8004512:	4649      	mov	r1, r9
 8004514:	f7fb fe64 	bl	80001e0 <__aeabi_dsub>
 8004518:	4632      	mov	r2, r6
 800451a:	463b      	mov	r3, r7
 800451c:	f7fb fe62 	bl	80001e4 <__adddf3>
 8004520:	ed9d 7b00 	vldr	d7, [sp]
 8004524:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004528:	ed84 7b00 	vstr	d7, [r4]
 800452c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004530:	e757      	b.n	80043e2 <__kernel_rem_pio2+0x51a>
 8004532:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004536:	f7fb fe55 	bl	80001e4 <__adddf3>
 800453a:	3d01      	subs	r5, #1
 800453c:	e75c      	b.n	80043f8 <__kernel_rem_pio2+0x530>
 800453e:	9b04      	ldr	r3, [sp, #16]
 8004540:	9a04      	ldr	r2, [sp, #16]
 8004542:	601f      	str	r7, [r3, #0]
 8004544:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004548:	605c      	str	r4, [r3, #4]
 800454a:	609d      	str	r5, [r3, #8]
 800454c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004550:	60d3      	str	r3, [r2, #12]
 8004552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004556:	6110      	str	r0, [r2, #16]
 8004558:	6153      	str	r3, [r2, #20]
 800455a:	e727      	b.n	80043ac <__kernel_rem_pio2+0x4e4>
 800455c:	41700000 	.word	0x41700000
 8004560:	3e700000 	.word	0x3e700000
 8004564:	00000000 	.word	0x00000000

08004568 <scalbn>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	ec55 4b10 	vmov	r4, r5, d0
 800456e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004572:	4606      	mov	r6, r0
 8004574:	462b      	mov	r3, r5
 8004576:	b999      	cbnz	r1, 80045a0 <scalbn+0x38>
 8004578:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800457c:	4323      	orrs	r3, r4
 800457e:	d03f      	beq.n	8004600 <scalbn+0x98>
 8004580:	4b35      	ldr	r3, [pc, #212]	; (8004658 <scalbn+0xf0>)
 8004582:	4629      	mov	r1, r5
 8004584:	ee10 0a10 	vmov	r0, s0
 8004588:	2200      	movs	r2, #0
 800458a:	f7fb ffe1 	bl	8000550 <__aeabi_dmul>
 800458e:	4b33      	ldr	r3, [pc, #204]	; (800465c <scalbn+0xf4>)
 8004590:	429e      	cmp	r6, r3
 8004592:	4604      	mov	r4, r0
 8004594:	460d      	mov	r5, r1
 8004596:	da10      	bge.n	80045ba <scalbn+0x52>
 8004598:	a327      	add	r3, pc, #156	; (adr r3, 8004638 <scalbn+0xd0>)
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	e01f      	b.n	80045e0 <scalbn+0x78>
 80045a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80045a4:	4291      	cmp	r1, r2
 80045a6:	d10c      	bne.n	80045c2 <scalbn+0x5a>
 80045a8:	ee10 2a10 	vmov	r2, s0
 80045ac:	4620      	mov	r0, r4
 80045ae:	4629      	mov	r1, r5
 80045b0:	f7fb fe18 	bl	80001e4 <__adddf3>
 80045b4:	4604      	mov	r4, r0
 80045b6:	460d      	mov	r5, r1
 80045b8:	e022      	b.n	8004600 <scalbn+0x98>
 80045ba:	460b      	mov	r3, r1
 80045bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80045c0:	3936      	subs	r1, #54	; 0x36
 80045c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80045c6:	4296      	cmp	r6, r2
 80045c8:	dd0d      	ble.n	80045e6 <scalbn+0x7e>
 80045ca:	2d00      	cmp	r5, #0
 80045cc:	a11c      	add	r1, pc, #112	; (adr r1, 8004640 <scalbn+0xd8>)
 80045ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045d2:	da02      	bge.n	80045da <scalbn+0x72>
 80045d4:	a11c      	add	r1, pc, #112	; (adr r1, 8004648 <scalbn+0xe0>)
 80045d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045da:	a319      	add	r3, pc, #100	; (adr r3, 8004640 <scalbn+0xd8>)
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	f7fb ffb6 	bl	8000550 <__aeabi_dmul>
 80045e4:	e7e6      	b.n	80045b4 <scalbn+0x4c>
 80045e6:	1872      	adds	r2, r6, r1
 80045e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80045ec:	428a      	cmp	r2, r1
 80045ee:	dcec      	bgt.n	80045ca <scalbn+0x62>
 80045f0:	2a00      	cmp	r2, #0
 80045f2:	dd08      	ble.n	8004606 <scalbn+0x9e>
 80045f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80045f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004600:	ec45 4b10 	vmov	d0, r4, r5
 8004604:	bd70      	pop	{r4, r5, r6, pc}
 8004606:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800460a:	da08      	bge.n	800461e <scalbn+0xb6>
 800460c:	2d00      	cmp	r5, #0
 800460e:	a10a      	add	r1, pc, #40	; (adr r1, 8004638 <scalbn+0xd0>)
 8004610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004614:	dac0      	bge.n	8004598 <scalbn+0x30>
 8004616:	a10e      	add	r1, pc, #56	; (adr r1, 8004650 <scalbn+0xe8>)
 8004618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800461c:	e7bc      	b.n	8004598 <scalbn+0x30>
 800461e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004622:	3236      	adds	r2, #54	; 0x36
 8004624:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004628:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800462c:	4620      	mov	r0, r4
 800462e:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <scalbn+0xf8>)
 8004630:	2200      	movs	r2, #0
 8004632:	e7d5      	b.n	80045e0 <scalbn+0x78>
 8004634:	f3af 8000 	nop.w
 8004638:	c2f8f359 	.word	0xc2f8f359
 800463c:	01a56e1f 	.word	0x01a56e1f
 8004640:	8800759c 	.word	0x8800759c
 8004644:	7e37e43c 	.word	0x7e37e43c
 8004648:	8800759c 	.word	0x8800759c
 800464c:	fe37e43c 	.word	0xfe37e43c
 8004650:	c2f8f359 	.word	0xc2f8f359
 8004654:	81a56e1f 	.word	0x81a56e1f
 8004658:	43500000 	.word	0x43500000
 800465c:	ffff3cb0 	.word	0xffff3cb0
 8004660:	3c900000 	.word	0x3c900000
 8004664:	00000000 	.word	0x00000000

08004668 <floor>:
 8004668:	ec51 0b10 	vmov	r0, r1, d0
 800466c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004674:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004678:	2e13      	cmp	r6, #19
 800467a:	ee10 5a10 	vmov	r5, s0
 800467e:	ee10 8a10 	vmov	r8, s0
 8004682:	460c      	mov	r4, r1
 8004684:	dc31      	bgt.n	80046ea <floor+0x82>
 8004686:	2e00      	cmp	r6, #0
 8004688:	da14      	bge.n	80046b4 <floor+0x4c>
 800468a:	a333      	add	r3, pc, #204	; (adr r3, 8004758 <floor+0xf0>)
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f7fb fda8 	bl	80001e4 <__adddf3>
 8004694:	2200      	movs	r2, #0
 8004696:	2300      	movs	r3, #0
 8004698:	f7fc f9ea 	bl	8000a70 <__aeabi_dcmpgt>
 800469c:	b138      	cbz	r0, 80046ae <floor+0x46>
 800469e:	2c00      	cmp	r4, #0
 80046a0:	da53      	bge.n	800474a <floor+0xe2>
 80046a2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80046a6:	4325      	orrs	r5, r4
 80046a8:	d052      	beq.n	8004750 <floor+0xe8>
 80046aa:	4c2d      	ldr	r4, [pc, #180]	; (8004760 <floor+0xf8>)
 80046ac:	2500      	movs	r5, #0
 80046ae:	4621      	mov	r1, r4
 80046b0:	4628      	mov	r0, r5
 80046b2:	e024      	b.n	80046fe <floor+0x96>
 80046b4:	4f2b      	ldr	r7, [pc, #172]	; (8004764 <floor+0xfc>)
 80046b6:	4137      	asrs	r7, r6
 80046b8:	ea01 0307 	and.w	r3, r1, r7
 80046bc:	4303      	orrs	r3, r0
 80046be:	d01e      	beq.n	80046fe <floor+0x96>
 80046c0:	a325      	add	r3, pc, #148	; (adr r3, 8004758 <floor+0xf0>)
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f7fb fd8d 	bl	80001e4 <__adddf3>
 80046ca:	2200      	movs	r2, #0
 80046cc:	2300      	movs	r3, #0
 80046ce:	f7fc f9cf 	bl	8000a70 <__aeabi_dcmpgt>
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d0eb      	beq.n	80046ae <floor+0x46>
 80046d6:	2c00      	cmp	r4, #0
 80046d8:	bfbe      	ittt	lt
 80046da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80046de:	4133      	asrlt	r3, r6
 80046e0:	18e4      	addlt	r4, r4, r3
 80046e2:	ea24 0407 	bic.w	r4, r4, r7
 80046e6:	2500      	movs	r5, #0
 80046e8:	e7e1      	b.n	80046ae <floor+0x46>
 80046ea:	2e33      	cmp	r6, #51	; 0x33
 80046ec:	dd0b      	ble.n	8004706 <floor+0x9e>
 80046ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80046f2:	d104      	bne.n	80046fe <floor+0x96>
 80046f4:	ee10 2a10 	vmov	r2, s0
 80046f8:	460b      	mov	r3, r1
 80046fa:	f7fb fd73 	bl	80001e4 <__adddf3>
 80046fe:	ec41 0b10 	vmov	d0, r0, r1
 8004702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004706:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800470a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800470e:	40df      	lsrs	r7, r3
 8004710:	4238      	tst	r0, r7
 8004712:	d0f4      	beq.n	80046fe <floor+0x96>
 8004714:	a310      	add	r3, pc, #64	; (adr r3, 8004758 <floor+0xf0>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f7fb fd63 	bl	80001e4 <__adddf3>
 800471e:	2200      	movs	r2, #0
 8004720:	2300      	movs	r3, #0
 8004722:	f7fc f9a5 	bl	8000a70 <__aeabi_dcmpgt>
 8004726:	2800      	cmp	r0, #0
 8004728:	d0c1      	beq.n	80046ae <floor+0x46>
 800472a:	2c00      	cmp	r4, #0
 800472c:	da0a      	bge.n	8004744 <floor+0xdc>
 800472e:	2e14      	cmp	r6, #20
 8004730:	d101      	bne.n	8004736 <floor+0xce>
 8004732:	3401      	adds	r4, #1
 8004734:	e006      	b.n	8004744 <floor+0xdc>
 8004736:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800473a:	2301      	movs	r3, #1
 800473c:	40b3      	lsls	r3, r6
 800473e:	441d      	add	r5, r3
 8004740:	45a8      	cmp	r8, r5
 8004742:	d8f6      	bhi.n	8004732 <floor+0xca>
 8004744:	ea25 0507 	bic.w	r5, r5, r7
 8004748:	e7b1      	b.n	80046ae <floor+0x46>
 800474a:	2500      	movs	r5, #0
 800474c:	462c      	mov	r4, r5
 800474e:	e7ae      	b.n	80046ae <floor+0x46>
 8004750:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004754:	e7ab      	b.n	80046ae <floor+0x46>
 8004756:	bf00      	nop
 8004758:	8800759c 	.word	0x8800759c
 800475c:	7e37e43c 	.word	0x7e37e43c
 8004760:	bff00000 	.word	0xbff00000
 8004764:	000fffff 	.word	0x000fffff

08004768 <_init>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr

08004774 <_fini>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr
